(window.webpackJsonp=window.webpackJsonp||[]).push([[71],{1036:function(t,n,s){"use strict";s.r(n);var a=s(4),e=Object(a.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"_1-gin框架路由详解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-gin框架路由详解"}},[t._v("#")]),t._v(" 1. gin框架路由详解")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://www.liwenzhou.com/posts/Go/gin-sourcecode/#autoid-0-0-0",target:"_blank",rel:"noopener noreferrer"}},[t._v("gin框架源码解析 - 李文周的博客"),n("OutboundLink")],1)]),t._v(" "),n("p",[t._v("gin框架使用的是定制版本的"),n("a",{attrs:{href:"https://github.com/julienschmidt/httprouter",target:"_blank",rel:"noopener noreferrer"}},[t._v("httprouter"),n("OutboundLink")],1),t._v("，其路由的原理是大量使用公共前缀的树结构，它基本上是一个紧凑的"),n("a",{attrs:{href:"https://baike.sogou.com/v66237892.htm",target:"_blank",rel:"noopener noreferrer"}},[t._v("Trie tree"),n("OutboundLink")],1),t._v("（或者只是"),n("a",{attrs:{href:"https://baike.sogou.com/v73626121.htm",target:"_blank",rel:"noopener noreferrer"}},[t._v("Radix Tree"),n("OutboundLink")],1),t._v("）。具有公共前缀的节点也共享一个公共父节点。")]),t._v(" "),n("h2",{attrs:{id:"radix-tree"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#radix-tree"}},[t._v("#")]),t._v(" "),n("strong",[t._v("Radix Tree")])]),t._v(" "),n("p",[t._v("基数树（Radix Tree）又称为PAT位树（Patricia Trie or crit bit tree），是一种更节省空间的前缀树（Trie Tree）。对于基数树的每个节点，如果该节点是唯一的子树的话，就和父节点合并。下图为一个基数树示例：")]),t._v(" "),n("p",[n("img",{attrs:{src:s(687),alt:""}})]),t._v(" "),n("p",[n("code",[t._v("Radix Tree")]),t._v("可以被认为是一棵简洁版的前缀树。我们注册路由的过程就是构造前缀树的过程，具有公共前缀的节点也共享一个公共父节点。假设我们现在注册有以下路由信息：")]),t._v(" "),n("div",{staticClass:"language-Plain Text line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-plain"}},[n("code",[t._v('r := gin.Default()\n\nr.GET("/", func1)\nr.GET("/search/", func2)\nr.GET("/support/", func3)\nr.GET("/blog/", func4)\nr.GET("/blog/:post/", func5)\nr.GET("/about-us/", func6)\nr.GET("/about-us/team/", func7)\nr.GET("/contact/", func8)\n\n')])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br")])]),n("p",[t._v("那么我们会得到一个"),n("code",[t._v("GET")]),t._v("方法对应的路由树，具体结构如下：")]),t._v(" "),n("div",{staticClass:"language-Plain Text line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-plain"}},[n("code",[t._v("Priority   Path             Handle\n9          \\                *<1>\n3          ├s               nil\n2          |├earch\\         *<2>\n1          |└upport\\        *<3>\n2          ├blog\\           *<4>\n1          |    └:post      nil\n1          |         └\\     *<5>\n2          ├about-us\\       *<6>\n1          |        └team\\  *<7>\n1          └contact\\        *<8>\n\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br")])]),n("p",[t._v("上面最右边那一列每个"),n("code",[t._v("<数字>")]),t._v("表示Handle处理函数的内存地址(一个指针)。从根节点遍历到叶子节点我们就能得到完整的路由表。")]),t._v(" "),n("p",[t._v("例如："),n("code",[t._v("blog/:post")]),t._v("其中"),n("code",[t._v(":post")]),t._v("只是实际文章名称的占位符(参数)。与"),n("code",[t._v("hash-maps")]),t._v("不同，这种树结构还允许我们使用像"),n("code",[t._v(":post")]),t._v("参数这种动态部分，因为我们实际上是根据路由模式进行匹配，而不仅仅是比较哈希值。")]),t._v(" "),n("p",[t._v("由于URL路径具有层次结构，并且只使用有限的一组字符(字节值)，所以很可能有许多常见的前缀。这使我们可以很容易地将路由简化为更小的问题。此外，路由器为每种请求方法管理一棵单独的树。一方面，它比在每个节点中都保存一个method-> handle map更加节省空间，它还使我们甚至可以在开始在前缀树中查找之前大大减少路由问题。")]),t._v(" "),n("p",[t._v("为了获得更好的可伸缩性，每个树级别上的子节点都按"),n("code",[t._v("Priority(优先级)")]),t._v("排序，其中优先级（最左列）就是在子节点(子节点、子子节点等等)中注册的句柄的数量。这样做有两个好处:")]),t._v(" "),n("ol",[n("li",[n("p",[t._v("首先优先匹配被大多数路由路径包含的节点。这样可以让尽可能多的路由快速被定位。")])]),t._v(" "),n("li",[n("p",[t._v("类似于成本补偿。最长的路径可以被优先匹配，补偿体现在最长的路径需要花费更长的时间来定位，如果最长路径的节点能被优先匹配（即每次拿子节点都命中），那么路由匹配所花的时间不一定比短路径的路由长。下面展示了节点（每个可以看做一个节点）匹配的路径：从左到右，从上到下。")])])]),t._v(" "),n("div",{staticClass:"language-Plain Text line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-plain"}},[n("code",[t._v("   ├------------\n   ├---------\n   ├-----\n   ├----\n   ├--\n   ├--\n   └-\n\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br")])]),n("h2",{attrs:{id:"路由树节点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#路由树节点"}},[t._v("#")]),t._v(" 路由树节点")]),t._v(" "),n("p",[t._v("路由树是由一个个节点构成的，gin框架路由树的节点由"),n("code",[t._v("node")]),t._v("结构体表示，它有以下字段：")]),t._v(" "),n("div",{staticClass:"language-Plain Text line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-plain"}},[n("code",[t._v('// tree.go\n\ntype node struct {\n   // 节点路径，比如上面的s，earch，和upport\n\tpath      string\n\t// 和children字段对应, 保存的是分裂的分支的第一个字符\n\t// 例如search和support, 那么s节点的indices对应的"eu"\n\t// 代表有两个分支, 分支的首字母分别是e和u\n\tindices   string\n\t// 儿子节点\n\tchildren  []*node\n\t// 处理函数链条（切片）\n\thandlers  HandlersChain\n\t// 优先级，子节点、子子节点等注册的handler数量\n\tpriority  uint32\n\t// 节点类型，包括static, root, param, catchAll\n\t// static: 静态节点（默认），比如上面的s，earch等节点\n\t// root: 树的根节点\n\t// catchAll: 有*匹配的节点\n\t// param: 参数节点\n\tnType     nodeType\n\t// 路径上最大参数个数\n\tmaxParams uint8\n\t// 节点是否是参数节点，比如上面的:post\n\twildChild bool\n\t// 完整路径\n\tfullPath  string\n}\n\n')])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br"),n("span",{staticClass:"line-number"},[t._v("22")]),n("br"),n("span",{staticClass:"line-number"},[t._v("23")]),n("br"),n("span",{staticClass:"line-number"},[t._v("24")]),n("br"),n("span",{staticClass:"line-number"},[t._v("25")]),n("br"),n("span",{staticClass:"line-number"},[t._v("26")]),n("br"),n("span",{staticClass:"line-number"},[t._v("27")]),n("br"),n("span",{staticClass:"line-number"},[t._v("28")]),n("br"),n("span",{staticClass:"line-number"},[t._v("29")]),n("br")])]),n("h2",{attrs:{id:"请求方法树"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#请求方法树"}},[t._v("#")]),t._v(" 请求方法树")]),t._v(" "),n("p",[t._v("在gin的路由中，每一个"),n("code",[t._v("HTTP Method")]),t._v("(GET、POST、PUT、DELETE…)都对应了一棵 "),n("code",[t._v("radix tree")]),t._v("，我们注册路由的时候会调用下面的"),n("code",[t._v("addRoute")]),t._v("函数：")]),t._v(" "),n("div",{staticClass:"language-Plain Text line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-plain"}},[n("code",[t._v('// gin.go\nfunc (engine *Engine) addRoute(method, path string, handlers HandlersChain) {\n   // liwenzhou.com...\n\n   // 获取请求方法对应的树\n\troot := engine.trees.get(method)\n\tif root == nil {\n\n\t   // 如果没有就创建一个\n\t\troot = new(node)\n\t\troot.fullPath = "/"\n\t\tengine.trees = append(engine.trees, methodTree{method: method, root: root})\n\t}\n\troot.addRoute(path, handlers)\n}\n\n')])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br")])]),n("p",[t._v("从上面的代码中我们可以看到在注册路由的时候都是先根据请求方法获取对应的树，也就是gin框架会为每一个请求方法创建一棵对应的树。只不过需要注意到一个细节是gin框架中保存请求方法对应树关系并不是使用的map而是使用的切片，"),n("code",[t._v("engine.trees")]),t._v("的类型是"),n("code",[t._v("methodTrees")]),t._v("，其定义如下：")]),t._v(" "),n("div",{staticClass:"language-Plain Text line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-plain"}},[n("code",[t._v("type methodTree struct {\n\tmethod string\n\troot   *node\n}\n\ntype methodTrees []methodTree  // slice\n\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br")])]),n("p",[t._v("而获取请求方法对应树的get方法定义如下：")]),t._v(" "),n("div",{staticClass:"language-Plain Text line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-plain"}},[n("code",[t._v("func (trees methodTrees) get(method string) *node {\n\tfor _, tree := range trees {\n\t\tif tree.method == method {\n\t\t\treturn tree.root\n\t\t}\n\t}\n\treturn nil\n}\n\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br")])]),n("p",[t._v("为什么使用切片而不是map来存储"),n("code",[t._v("请求方法->树")]),t._v("的结构呢？我猜是出于节省内存的考虑吧，毕竟HTTP请求方法的数量是固定的，而且常用的就那几种，所以即使使用切片存储查询起来效率也足够了。顺着这个思路，我们可以看一下gin框架中"),n("code",[t._v("engine")]),t._v("的初始化方法中，确实对"),n("code",[t._v("tress")]),t._v("字段做了一次内存申请：")]),t._v(" "),n("div",{staticClass:"language-Plain Text line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-plain"}},[n("code",[t._v('func New() *Engine {\n\tdebugPrintWARNINGNew()\n\tengine := &Engine{\n\t\tRouterGroup: RouterGroup{\n\t\t\tHandlers: nil,\n\t\t\tbasePath: "/",\n\t\t\troot:     true,\n\t\t},\n\t\t// liwenzhou.com ...\n\t\t// 初始化容量为9的切片（HTTP1.1请求方法共9种）\n\t\ttrees:                  make(methodTrees, 0, 9),\n\t\t// liwenzhou.com...\n\t}\n\tengine.RouterGroup.engine = engine\n\tengine.pool.New = func() interface{} {\n\t\treturn engine.allocateContext()\n\t}\n\treturn engine\n}\n\n')])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br")])]),n("h2",{attrs:{id:"注册路由"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#注册路由"}},[t._v("#")]),t._v(" 注册路由")]),t._v(" "),n("p",[t._v("注册路由的逻辑主要有"),n("code",[t._v("addRoute")]),t._v("函数和"),n("code",[t._v("insertChild")]),t._v("方法。")]),t._v(" "),n("h3",{attrs:{id:"addroute"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#addroute"}},[t._v("#")]),t._v(" addRoute")]),t._v(" "),n("div",{staticClass:"language-Plain Text line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-plain"}},[n("code",[t._v("// tree.go\n\n// addRoute 将具有给定句柄的节点添加到路径中。\n// 不是并发安全的\nfunc (n *node) addRoute(path string, handlers HandlersChain) {\n\tfullPath := path\n\tn.priority++\n\tnumParams := countParams(path)  // 数一下参数个数\n\n\t// 空树就直接插入当前节点\n\tif len(n.path) == 0 && len(n.children) == 0 {\n\t\tn.insertChild(numParams, path, fullPath, handlers)\n\t\tn.nType = root\n\t\treturn\n\t}\n\n\tparentFullPathIndex := 0\n\nwalk:\n\tfor {\n\t\t// 更新当前节点的最大参数个数\n\t\tif numParams > n.maxParams {\n\t\t\tn.maxParams = numParams\n\t\t}\n\n\t\t// 找到最长的通用前缀\n\t\t// 这也意味着公共前缀不包含“:”\"或“*” /\n\t\t// 因为现有键不能包含这些字符。\n\t\ti := longestCommonPrefix(path, n.path)\n\n\t\t// 分裂边缘（此处分裂的是当前树节点）\n\t\t// 例如一开始path是search，新加入support，s是他们通用的最长前缀部分\n\t\t// 那么会将s拿出来作为parent节点，增加earch和upport作为child节点\n\t\tif i < len(n.path) {\n\t\t\tchild := node{\n\t\t\t\tpath:      n.path[i:],  // 公共前缀后的部分作为子节点\n\t\t\t\twildChild: n.wildChild,\n\t\t\t\tindices:   n.indices,\n\t\t\t\tchildren:  n.children,\n\t\t\t\thandlers:  n.handlers,\n\t\t\t\tpriority:  n.priority - 1, //子节点优先级-1\n\t\t\t\tfullPath:  n.fullPath,\n\t\t\t}\n\n\t\t\t// Update maxParams (max of all children)\n\t\t\tfor _, v := range child.children {\n\t\t\t\tif v.maxParams > child.maxParams {\n\t\t\t\t\tchild.maxParams = v.maxParams\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tn.children = []*node{&child}\n\t\t\t// []byte for proper unicode char conversion, see #65\n\t\t\tn.indices = string([]byte{n.path[i]})\n\t\t\tn.path = path[:i]\n\t\t\tn.handlers = nil\n\t\t\tn.wildChild = false\n\t\t\tn.fullPath = fullPath[:parentFullPathIndex+i]\n\t\t}\n\n\t\t// 将新来的节点插入新的parent节点作为子节点\n\t\tif i < len(path) {\n\t\t\tpath = path[i:]\n\n\t\t\tif n.wildChild {  // 如果是参数节点\n\t\t\t\tparentFullPathIndex += len(n.path)\n\t\t\t\tn = n.children[0]\n\t\t\t\tn.priority++\n\n\t\t\t\t// Update maxParams of the child node\n\t\t\t\tif numParams > n.maxParams {\n\t\t\t\t\tn.maxParams = numParams\n\t\t\t\t}\n\t\t\t\tnumParams--\n\n\t\t\t\t// 检查通配符是否匹配\n\t\t\t\tif len(path) >= len(n.path) && n.path == path[:len(n.path)] {\n\t\t\t\t\t// 检查更长的通配符, 例如 :name and :names\n\t\t\t\t\tif len(n.path) >= len(path) || path[len(n.path)] == '/' {\n\t\t\t\t\t\tcontinue walk\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tpathSeg := path\n\t\t\t\tif n.nType != catchAll {\n\t\t\t\t\tpathSeg = strings.SplitN(path, \"/\", 2)[0]\n\t\t\t\t}\n\t\t\t\tprefix := fullPath[:strings.Index(fullPath, pathSeg)] + n.path\n\t\t\t\tpanic(\"'\" + pathSeg +\n\t\t\t\t\t\"' in new path '\" + fullPath +\n\t\t\t\t\t\"' conflicts with existing wildcard '\" + n.path +\n\t\t\t\t\t\"' in existing prefix '\" + prefix +\n\t\t\t\t\t\"'\")\n\t\t\t}\n\t\t\t// 取path首字母，用来与indices做比较\n\t\t\tc := path[0]\n\n\t\t\t// 处理参数后加斜线情况\n\t\t\tif n.nType == param && c == '/' && len(n.children) == 1 {\n\t\t\t\tparentFullPathIndex += len(n.path)\n\t\t\t\tn = n.children[0]\n\t\t\t\tn.priority++\n\t\t\t\tcontinue walk\n\t\t\t}\n\n\t\t\t// 检查路path下一个字节的子节点是否存在\n\t\t\t// 比如s的子节点现在是earch和upport，indices为eu\n\t\t\t// 如果新加一个路由为super，那么就是和upport有匹配的部分u，将继续分列现在的upport节点\n\t\t\tfor i, max := 0, len(n.indices); i < max; i++ {\n\t\t\t\tif c == n.indices[i] {\n\t\t\t\t\tparentFullPathIndex += len(n.path)\n\t\t\t\t\ti = n.incrementChildPrio(i)\n\t\t\t\t\tn = n.children[i]\n\t\t\t\t\tcontinue walk\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// 否则就插入\n\t\t\tif c != ':' && c != '*' {\n\t\t\t\t// []byte for proper unicode char conversion, see #65\n\t\t\t\t// 注意这里是直接拼接第一个字符到n.indices\n\t\t\t\tn.indices += string([]byte{c})\n\t\t\t\tchild := &node{\n\t\t\t\t\tmaxParams: numParams,\n\t\t\t\t\tfullPath:  fullPath,\n\t\t\t\t}\n\t\t\t\t// 追加子节点\n\t\t\t\tn.children = append(n.children, child)\n\t\t\t\tn.incrementChildPrio(len(n.indices) - 1)\n\t\t\t\tn = child\n\t\t\t}\n\t\t\tn.insertChild(numParams, path, fullPath, handlers)\n\t\t\treturn\n\t\t}\n\n\t\t// 已经注册过的节点\n\t\tif n.handlers != nil {\n\t\t\tpanic(\"handlers are already registered for path '\" + fullPath + \"'\")\n\t\t}\n\t\tn.handlers = handlers\n\t\treturn\n\t}\n}\n\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br"),n("span",{staticClass:"line-number"},[t._v("22")]),n("br"),n("span",{staticClass:"line-number"},[t._v("23")]),n("br"),n("span",{staticClass:"line-number"},[t._v("24")]),n("br"),n("span",{staticClass:"line-number"},[t._v("25")]),n("br"),n("span",{staticClass:"line-number"},[t._v("26")]),n("br"),n("span",{staticClass:"line-number"},[t._v("27")]),n("br"),n("span",{staticClass:"line-number"},[t._v("28")]),n("br"),n("span",{staticClass:"line-number"},[t._v("29")]),n("br"),n("span",{staticClass:"line-number"},[t._v("30")]),n("br"),n("span",{staticClass:"line-number"},[t._v("31")]),n("br"),n("span",{staticClass:"line-number"},[t._v("32")]),n("br"),n("span",{staticClass:"line-number"},[t._v("33")]),n("br"),n("span",{staticClass:"line-number"},[t._v("34")]),n("br"),n("span",{staticClass:"line-number"},[t._v("35")]),n("br"),n("span",{staticClass:"line-number"},[t._v("36")]),n("br"),n("span",{staticClass:"line-number"},[t._v("37")]),n("br"),n("span",{staticClass:"line-number"},[t._v("38")]),n("br"),n("span",{staticClass:"line-number"},[t._v("39")]),n("br"),n("span",{staticClass:"line-number"},[t._v("40")]),n("br"),n("span",{staticClass:"line-number"},[t._v("41")]),n("br"),n("span",{staticClass:"line-number"},[t._v("42")]),n("br"),n("span",{staticClass:"line-number"},[t._v("43")]),n("br"),n("span",{staticClass:"line-number"},[t._v("44")]),n("br"),n("span",{staticClass:"line-number"},[t._v("45")]),n("br"),n("span",{staticClass:"line-number"},[t._v("46")]),n("br"),n("span",{staticClass:"line-number"},[t._v("47")]),n("br"),n("span",{staticClass:"line-number"},[t._v("48")]),n("br"),n("span",{staticClass:"line-number"},[t._v("49")]),n("br"),n("span",{staticClass:"line-number"},[t._v("50")]),n("br"),n("span",{staticClass:"line-number"},[t._v("51")]),n("br"),n("span",{staticClass:"line-number"},[t._v("52")]),n("br"),n("span",{staticClass:"line-number"},[t._v("53")]),n("br"),n("span",{staticClass:"line-number"},[t._v("54")]),n("br"),n("span",{staticClass:"line-number"},[t._v("55")]),n("br"),n("span",{staticClass:"line-number"},[t._v("56")]),n("br"),n("span",{staticClass:"line-number"},[t._v("57")]),n("br"),n("span",{staticClass:"line-number"},[t._v("58")]),n("br"),n("span",{staticClass:"line-number"},[t._v("59")]),n("br"),n("span",{staticClass:"line-number"},[t._v("60")]),n("br"),n("span",{staticClass:"line-number"},[t._v("61")]),n("br"),n("span",{staticClass:"line-number"},[t._v("62")]),n("br"),n("span",{staticClass:"line-number"},[t._v("63")]),n("br"),n("span",{staticClass:"line-number"},[t._v("64")]),n("br"),n("span",{staticClass:"line-number"},[t._v("65")]),n("br"),n("span",{staticClass:"line-number"},[t._v("66")]),n("br"),n("span",{staticClass:"line-number"},[t._v("67")]),n("br"),n("span",{staticClass:"line-number"},[t._v("68")]),n("br"),n("span",{staticClass:"line-number"},[t._v("69")]),n("br"),n("span",{staticClass:"line-number"},[t._v("70")]),n("br"),n("span",{staticClass:"line-number"},[t._v("71")]),n("br"),n("span",{staticClass:"line-number"},[t._v("72")]),n("br"),n("span",{staticClass:"line-number"},[t._v("73")]),n("br"),n("span",{staticClass:"line-number"},[t._v("74")]),n("br"),n("span",{staticClass:"line-number"},[t._v("75")]),n("br"),n("span",{staticClass:"line-number"},[t._v("76")]),n("br"),n("span",{staticClass:"line-number"},[t._v("77")]),n("br"),n("span",{staticClass:"line-number"},[t._v("78")]),n("br"),n("span",{staticClass:"line-number"},[t._v("79")]),n("br"),n("span",{staticClass:"line-number"},[t._v("80")]),n("br"),n("span",{staticClass:"line-number"},[t._v("81")]),n("br"),n("span",{staticClass:"line-number"},[t._v("82")]),n("br"),n("span",{staticClass:"line-number"},[t._v("83")]),n("br"),n("span",{staticClass:"line-number"},[t._v("84")]),n("br"),n("span",{staticClass:"line-number"},[t._v("85")]),n("br"),n("span",{staticClass:"line-number"},[t._v("86")]),n("br"),n("span",{staticClass:"line-number"},[t._v("87")]),n("br"),n("span",{staticClass:"line-number"},[t._v("88")]),n("br"),n("span",{staticClass:"line-number"},[t._v("89")]),n("br"),n("span",{staticClass:"line-number"},[t._v("90")]),n("br"),n("span",{staticClass:"line-number"},[t._v("91")]),n("br"),n("span",{staticClass:"line-number"},[t._v("92")]),n("br"),n("span",{staticClass:"line-number"},[t._v("93")]),n("br"),n("span",{staticClass:"line-number"},[t._v("94")]),n("br"),n("span",{staticClass:"line-number"},[t._v("95")]),n("br"),n("span",{staticClass:"line-number"},[t._v("96")]),n("br"),n("span",{staticClass:"line-number"},[t._v("97")]),n("br"),n("span",{staticClass:"line-number"},[t._v("98")]),n("br"),n("span",{staticClass:"line-number"},[t._v("99")]),n("br"),n("span",{staticClass:"line-number"},[t._v("100")]),n("br"),n("span",{staticClass:"line-number"},[t._v("101")]),n("br"),n("span",{staticClass:"line-number"},[t._v("102")]),n("br"),n("span",{staticClass:"line-number"},[t._v("103")]),n("br"),n("span",{staticClass:"line-number"},[t._v("104")]),n("br"),n("span",{staticClass:"line-number"},[t._v("105")]),n("br"),n("span",{staticClass:"line-number"},[t._v("106")]),n("br"),n("span",{staticClass:"line-number"},[t._v("107")]),n("br"),n("span",{staticClass:"line-number"},[t._v("108")]),n("br"),n("span",{staticClass:"line-number"},[t._v("109")]),n("br"),n("span",{staticClass:"line-number"},[t._v("110")]),n("br"),n("span",{staticClass:"line-number"},[t._v("111")]),n("br"),n("span",{staticClass:"line-number"},[t._v("112")]),n("br"),n("span",{staticClass:"line-number"},[t._v("113")]),n("br"),n("span",{staticClass:"line-number"},[t._v("114")]),n("br"),n("span",{staticClass:"line-number"},[t._v("115")]),n("br"),n("span",{staticClass:"line-number"},[t._v("116")]),n("br"),n("span",{staticClass:"line-number"},[t._v("117")]),n("br"),n("span",{staticClass:"line-number"},[t._v("118")]),n("br"),n("span",{staticClass:"line-number"},[t._v("119")]),n("br"),n("span",{staticClass:"line-number"},[t._v("120")]),n("br"),n("span",{staticClass:"line-number"},[t._v("121")]),n("br"),n("span",{staticClass:"line-number"},[t._v("122")]),n("br"),n("span",{staticClass:"line-number"},[t._v("123")]),n("br"),n("span",{staticClass:"line-number"},[t._v("124")]),n("br"),n("span",{staticClass:"line-number"},[t._v("125")]),n("br"),n("span",{staticClass:"line-number"},[t._v("126")]),n("br"),n("span",{staticClass:"line-number"},[t._v("127")]),n("br"),n("span",{staticClass:"line-number"},[t._v("128")]),n("br"),n("span",{staticClass:"line-number"},[t._v("129")]),n("br"),n("span",{staticClass:"line-number"},[t._v("130")]),n("br"),n("span",{staticClass:"line-number"},[t._v("131")]),n("br"),n("span",{staticClass:"line-number"},[t._v("132")]),n("br"),n("span",{staticClass:"line-number"},[t._v("133")]),n("br"),n("span",{staticClass:"line-number"},[t._v("134")]),n("br"),n("span",{staticClass:"line-number"},[t._v("135")]),n("br"),n("span",{staticClass:"line-number"},[t._v("136")]),n("br"),n("span",{staticClass:"line-number"},[t._v("137")]),n("br"),n("span",{staticClass:"line-number"},[t._v("138")]),n("br"),n("span",{staticClass:"line-number"},[t._v("139")]),n("br"),n("span",{staticClass:"line-number"},[t._v("140")]),n("br"),n("span",{staticClass:"line-number"},[t._v("141")]),n("br"),n("span",{staticClass:"line-number"},[t._v("142")]),n("br"),n("span",{staticClass:"line-number"},[t._v("143")]),n("br"),n("span",{staticClass:"line-number"},[t._v("144")]),n("br")])]),n("p",[t._v("其实上面的代码很好理解，大家可以参照动画尝试将以下情形代入上面的代码逻辑，体味整个路由树构造的详细过程：")]),t._v(" "),n("ol",[n("li",[n("p",[t._v("第一次注册路由，例如注册search")])]),t._v(" "),n("li",[n("p",[t._v("继续注册一条没有公共前缀的路由，例如blog")])]),t._v(" "),n("li",[n("p",[t._v("注册一条与先前注册的路由有公共前缀的路由，例如support")])])]),t._v(" "),n("p",[n("img",{attrs:{src:s(688),alt:""}})]),t._v(" "),n("h3",{attrs:{id:"insertchild"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#insertchild"}},[t._v("#")]),t._v(" insertChild")]),t._v(" "),n("div",{staticClass:"language-Plain Text line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-plain"}},[n("code",[t._v("// tree.go\nfunc (n *node) insertChild(numParams uint8, path string, fullPath string, handlers HandlersChain) {\n  // 找到所有的参数\n\tfor numParams > 0 {\n\t\t// 查找前缀直到第一个通配符\n\t\twildcard, i, valid := findWildcard(path)\n\t\tif i < 0 { // 没有发现通配符\n\t\t\tbreak\n\t\t}\n\n\t\t// 通配符的名称必须包含':' 和 '*'\n\t\tif !valid {\n\t\t\tpanic(\"only one wildcard per path segment is allowed, has: '\" +\n\t\t\t\twildcard + \"' in path '\" + fullPath + \"'\")\n\t\t}\n\n\t\t// 检查通配符是否有名称\n\t\tif len(wildcard) < 2 {\n\t\t\tpanic(\"wildcards must be named with a non-empty name in path '\" + fullPath + \"'\")\n\t\t}\n\n\t\t// 检查这个节点是否有已经存在的子节点\n\t\t// 如果我们在这里插入通配符，这些子节点将无法访问\n\t\tif len(n.children) > 0 {\n\t\t\tpanic(\"wildcard segment '\" + wildcard +\n\t\t\t\t\"' conflicts with existing children in path '\" + fullPath + \"'\")\n\t\t}\n\n\t\tif wildcard[0] == ':' { // param\n\t\t\tif i > 0 {\n\t\t\t\t// 在当前通配符之前插入前缀\n\t\t\t\tn.path = path[:i]\n\t\t\t\tpath = path[i:]\n\t\t\t}\n\n\t\t\tn.wildChild = true\n\t\t\tchild := &node{\n\t\t\t\tnType:     param,\n\t\t\t\tpath:      wildcard,\n\t\t\t\tmaxParams: numParams,\n\t\t\t\tfullPath:  fullPath,\n\t\t\t}\n\t\t\tn.children = []*node{child}\n\t\t\tn = child\n\t\t\tn.priority++\n\t\t\tnumParams--\n\n\t\t\t// 如果路径没有以通配符结束\n\t\t\t// 那么将有另一个以'/'开始的非通配符子路径。\n\t\t\tif len(wildcard) < len(path) {\n\t\t\t\tpath = path[len(wildcard):]\n\n\t\t\t\tchild := &node{\n\t\t\t\t\tmaxParams: numParams,\n\t\t\t\t\tpriority:  1,\n\t\t\t\t\tfullPath:  fullPath,\n\t\t\t\t}\n\t\t\t\tn.children = []*node{child}\n\t\t\t\tn = child  // 继续下一轮循环\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\t// 否则我们就完成了。将处理函数插入新叶子中\n\t\t\tn.handlers = handlers\n\t\t\treturn\n\t\t}\n\n\t\t// catchAll\n\t\tif i+len(wildcard) != len(path) || numParams > 1 {\n\t\t\tpanic(\"catch-all routes are only allowed at the end of the path in path '\" + fullPath + \"'\")\n\t\t}\n\n\t\tif len(n.path) > 0 && n.path[len(n.path)-1] == '/' {\n\t\t\tpanic(\"catch-all conflicts with existing handle for the path segment root in path '\" + fullPath + \"'\")\n\t\t}\n\n\t\t// currently fixed width 1 for '/'\n\t\ti--\n\t\tif path[i] != '/' {\n\t\t\tpanic(\"no / before catch-all in path '\" + fullPath + \"'\")\n\t\t}\n\n\t\tn.path = path[:i]\n\n\t\t// 第一个节点:路径为空的catchAll节点\n\t\tchild := &node{\n\t\t\twildChild: true,\n\t\t\tnType:     catchAll,\n\t\t\tmaxParams: 1,\n\t\t\tfullPath:  fullPath,\n\t\t}\n\t\t// 更新父节点的maxParams\n\t\tif n.maxParams < 1 {\n\t\t\tn.maxParams = 1\n\t\t}\n\t\tn.children = []*node{child}\n\t\tn.indices = string('/')\n\t\tn = child\n\t\tn.priority++\n\n\t\t// 第二个节点:保存变量的节点\n\t\tchild = &node{\n\t\t\tpath:      path[i:],\n\t\t\tnType:     catchAll,\n\t\t\tmaxParams: 1,\n\t\t\thandlers:  handlers,\n\t\t\tpriority:  1,\n\t\t\tfullPath:  fullPath,\n\t\t}\n\t\tn.children = []*node{child}\n\n\t\treturn\n\t}\n\n\t// 如果没有找到通配符，只需插入路径和句柄\n\tn.path = path\n\tn.handlers = handlers\n\tn.fullPath = fullPath\n}\n\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br"),n("span",{staticClass:"line-number"},[t._v("22")]),n("br"),n("span",{staticClass:"line-number"},[t._v("23")]),n("br"),n("span",{staticClass:"line-number"},[t._v("24")]),n("br"),n("span",{staticClass:"line-number"},[t._v("25")]),n("br"),n("span",{staticClass:"line-number"},[t._v("26")]),n("br"),n("span",{staticClass:"line-number"},[t._v("27")]),n("br"),n("span",{staticClass:"line-number"},[t._v("28")]),n("br"),n("span",{staticClass:"line-number"},[t._v("29")]),n("br"),n("span",{staticClass:"line-number"},[t._v("30")]),n("br"),n("span",{staticClass:"line-number"},[t._v("31")]),n("br"),n("span",{staticClass:"line-number"},[t._v("32")]),n("br"),n("span",{staticClass:"line-number"},[t._v("33")]),n("br"),n("span",{staticClass:"line-number"},[t._v("34")]),n("br"),n("span",{staticClass:"line-number"},[t._v("35")]),n("br"),n("span",{staticClass:"line-number"},[t._v("36")]),n("br"),n("span",{staticClass:"line-number"},[t._v("37")]),n("br"),n("span",{staticClass:"line-number"},[t._v("38")]),n("br"),n("span",{staticClass:"line-number"},[t._v("39")]),n("br"),n("span",{staticClass:"line-number"},[t._v("40")]),n("br"),n("span",{staticClass:"line-number"},[t._v("41")]),n("br"),n("span",{staticClass:"line-number"},[t._v("42")]),n("br"),n("span",{staticClass:"line-number"},[t._v("43")]),n("br"),n("span",{staticClass:"line-number"},[t._v("44")]),n("br"),n("span",{staticClass:"line-number"},[t._v("45")]),n("br"),n("span",{staticClass:"line-number"},[t._v("46")]),n("br"),n("span",{staticClass:"line-number"},[t._v("47")]),n("br"),n("span",{staticClass:"line-number"},[t._v("48")]),n("br"),n("span",{staticClass:"line-number"},[t._v("49")]),n("br"),n("span",{staticClass:"line-number"},[t._v("50")]),n("br"),n("span",{staticClass:"line-number"},[t._v("51")]),n("br"),n("span",{staticClass:"line-number"},[t._v("52")]),n("br"),n("span",{staticClass:"line-number"},[t._v("53")]),n("br"),n("span",{staticClass:"line-number"},[t._v("54")]),n("br"),n("span",{staticClass:"line-number"},[t._v("55")]),n("br"),n("span",{staticClass:"line-number"},[t._v("56")]),n("br"),n("span",{staticClass:"line-number"},[t._v("57")]),n("br"),n("span",{staticClass:"line-number"},[t._v("58")]),n("br"),n("span",{staticClass:"line-number"},[t._v("59")]),n("br"),n("span",{staticClass:"line-number"},[t._v("60")]),n("br"),n("span",{staticClass:"line-number"},[t._v("61")]),n("br"),n("span",{staticClass:"line-number"},[t._v("62")]),n("br"),n("span",{staticClass:"line-number"},[t._v("63")]),n("br"),n("span",{staticClass:"line-number"},[t._v("64")]),n("br"),n("span",{staticClass:"line-number"},[t._v("65")]),n("br"),n("span",{staticClass:"line-number"},[t._v("66")]),n("br"),n("span",{staticClass:"line-number"},[t._v("67")]),n("br"),n("span",{staticClass:"line-number"},[t._v("68")]),n("br"),n("span",{staticClass:"line-number"},[t._v("69")]),n("br"),n("span",{staticClass:"line-number"},[t._v("70")]),n("br"),n("span",{staticClass:"line-number"},[t._v("71")]),n("br"),n("span",{staticClass:"line-number"},[t._v("72")]),n("br"),n("span",{staticClass:"line-number"},[t._v("73")]),n("br"),n("span",{staticClass:"line-number"},[t._v("74")]),n("br"),n("span",{staticClass:"line-number"},[t._v("75")]),n("br"),n("span",{staticClass:"line-number"},[t._v("76")]),n("br"),n("span",{staticClass:"line-number"},[t._v("77")]),n("br"),n("span",{staticClass:"line-number"},[t._v("78")]),n("br"),n("span",{staticClass:"line-number"},[t._v("79")]),n("br"),n("span",{staticClass:"line-number"},[t._v("80")]),n("br"),n("span",{staticClass:"line-number"},[t._v("81")]),n("br"),n("span",{staticClass:"line-number"},[t._v("82")]),n("br"),n("span",{staticClass:"line-number"},[t._v("83")]),n("br"),n("span",{staticClass:"line-number"},[t._v("84")]),n("br"),n("span",{staticClass:"line-number"},[t._v("85")]),n("br"),n("span",{staticClass:"line-number"},[t._v("86")]),n("br"),n("span",{staticClass:"line-number"},[t._v("87")]),n("br"),n("span",{staticClass:"line-number"},[t._v("88")]),n("br"),n("span",{staticClass:"line-number"},[t._v("89")]),n("br"),n("span",{staticClass:"line-number"},[t._v("90")]),n("br"),n("span",{staticClass:"line-number"},[t._v("91")]),n("br"),n("span",{staticClass:"line-number"},[t._v("92")]),n("br"),n("span",{staticClass:"line-number"},[t._v("93")]),n("br"),n("span",{staticClass:"line-number"},[t._v("94")]),n("br"),n("span",{staticClass:"line-number"},[t._v("95")]),n("br"),n("span",{staticClass:"line-number"},[t._v("96")]),n("br"),n("span",{staticClass:"line-number"},[t._v("97")]),n("br"),n("span",{staticClass:"line-number"},[t._v("98")]),n("br"),n("span",{staticClass:"line-number"},[t._v("99")]),n("br"),n("span",{staticClass:"line-number"},[t._v("100")]),n("br"),n("span",{staticClass:"line-number"},[t._v("101")]),n("br"),n("span",{staticClass:"line-number"},[t._v("102")]),n("br"),n("span",{staticClass:"line-number"},[t._v("103")]),n("br"),n("span",{staticClass:"line-number"},[t._v("104")]),n("br"),n("span",{staticClass:"line-number"},[t._v("105")]),n("br"),n("span",{staticClass:"line-number"},[t._v("106")]),n("br"),n("span",{staticClass:"line-number"},[t._v("107")]),n("br"),n("span",{staticClass:"line-number"},[t._v("108")]),n("br"),n("span",{staticClass:"line-number"},[t._v("109")]),n("br"),n("span",{staticClass:"line-number"},[t._v("110")]),n("br"),n("span",{staticClass:"line-number"},[t._v("111")]),n("br"),n("span",{staticClass:"line-number"},[t._v("112")]),n("br"),n("span",{staticClass:"line-number"},[t._v("113")]),n("br"),n("span",{staticClass:"line-number"},[t._v("114")]),n("br"),n("span",{staticClass:"line-number"},[t._v("115")]),n("br"),n("span",{staticClass:"line-number"},[t._v("116")]),n("br"),n("span",{staticClass:"line-number"},[t._v("117")]),n("br"),n("span",{staticClass:"line-number"},[t._v("118")]),n("br"),n("span",{staticClass:"line-number"},[t._v("119")]),n("br"),n("span",{staticClass:"line-number"},[t._v("120")]),n("br")])]),n("p",[n("code",[t._v("insertChild")]),t._v("函数是根据"),n("code",[t._v("path")]),t._v("本身进行分割，将"),n("code",[t._v("/")]),t._v("分开的部分分别作为节点保存，形成一棵树结构。参数匹配中的"),n("code",[t._v(":")]),t._v("和``的区别是，前者是匹配一个字段而后者是匹配后面所有的路径。")]),t._v(" "),n("h2",{attrs:{id:"路由匹配"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#路由匹配"}},[t._v("#")]),t._v(" 路由匹配")]),t._v(" "),n("p",[t._v("我们先来看gin框架处理请求的入口函数"),n("code",[t._v("ServeHTTP")]),t._v("：")]),t._v(" "),n("div",{staticClass:"language-Plain Text line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-plain"}},[n("code",[t._v("// gin.go\nfunc (engine *Engine) ServeHTTP(w http.ResponseWriter, req *http.Request) {\n  // 这里使用了对象池\n\tc := engine.pool.Get().(*Context)\n  // 这里有一个细节就是Get对象后做初始化\n\tc.writermem.reset(w)\n\tc.Request = req\n\tc.reset()\n\n\tengine.handleHTTPRequest(c)  // 我们要找的处理HTTP请求的函数\n\n\tengine.pool.Put(c)  // 处理完请求后将对象放回池子\n}\n\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br")])]),n("p",[t._v("函数很长，这里省略了部分代码，只保留相关逻辑代码：")]),t._v(" "),n("div",{staticClass:"language-Plain Text line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-plain"}},[n("code",[t._v("// gin.go\nfunc (engine *Engine) handleHTTPRequest(c *Context) {\n\t// liwenzhou.com...\n\n\t// 根据请求方法找到对应的路由树\n\tt := engine.trees\n\tfor i, tl := 0, len(t); i < tl; i++ {\n\t\tif t[i].method != httpMethod {\n\t\t\tcontinue\n\t\t}\n\t\troot := t[i].root\n\t\t// 在路由树中根据path查找\n\t\tvalue := root.getValue(rPath, c.Params, unescape)\n\t\tif value.handlers != nil {\n\t\t\tc.handlers = value.handlers\n\t\t\tc.Params = value.params\n\t\t\tc.fullPath = value.fullPath\n\t\t\tc.Next()  // 执行函数链条\n\t\t\tc.writermem.WriteHeaderNow()\n\t\t\treturn\n\t\t}\n\n\t// liwenzhou.com...\n\tc.handlers = engine.allNoRoute\n\tserveError(c, http.StatusNotFound, default404Body)\n}\n\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br"),n("span",{staticClass:"line-number"},[t._v("22")]),n("br"),n("span",{staticClass:"line-number"},[t._v("23")]),n("br"),n("span",{staticClass:"line-number"},[t._v("24")]),n("br"),n("span",{staticClass:"line-number"},[t._v("25")]),n("br"),n("span",{staticClass:"line-number"},[t._v("26")]),n("br"),n("span",{staticClass:"line-number"},[t._v("27")]),n("br")])]),n("p",[t._v("路由匹配是由节点的 "),n("code",[t._v("getValue")]),t._v("方法实现的。"),n("code",[t._v("getValue")]),t._v("根据给定的路径(键)返回"),n("code",[t._v("nodeValue")]),t._v("值，保存注册的处理函数和匹配到的路径参数数据。")]),t._v(" "),n("p",[t._v("如果找不到任何处理函数，则会尝试TSR(尾随斜杠重定向)。")]),t._v(" "),n("p",[t._v("代码虽然很长，但还算比较工整。大家可以借助注释看一下路由查找及参数匹配的逻辑。")]),t._v(" "),n("div",{staticClass:"language-Plain Text line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-plain"}},[n("code",[t._v('// tree.go\n\ntype nodeValue struct {\n\thandlers HandlersChain\n\tparams   Params  // []Param\n\ttsr      bool\n\tfullPath string\n}\n\n// liwenzhou.com...\n\nfunc (n *node) getValue(path string, po Params, unescape bool) (value nodeValue) {\n\tvalue.params = po\nwalk: // Outer loop for walking the tree\n\tfor {\n\t\tprefix := n.path\n\t\tif path == prefix {\n\t\t\t// 我们应该已经到达包含处理函数的节点。\n\t\t\t// 检查该节点是否注册有处理函数\n\t\t\tif value.handlers = n.handlers; value.handlers != nil {\n\t\t\t\tvalue.fullPath = n.fullPath\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tif path == "/" && n.wildChild && n.nType != root {\n\t\t\t\tvalue.tsr = true\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\t// 没有找到处理函数 检查这个路径末尾+/ 是否存在注册函数\n\t\t\tindices := n.indices\n\t\t\tfor i, max := 0, len(indices); i < max; i++ {\n\t\t\t\tif indices[i] == \'/\' {\n\t\t\t\t\tn = n.children[i]\n\t\t\t\t\tvalue.tsr = (len(n.path) == 1 && n.handlers != nil) ||\n\t\t\t\t\t\t(n.nType == catchAll && n.children[0].handlers != nil)\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn\n\t\t}\n\n\t\tif len(path) > len(prefix) && path[:len(prefix)] == prefix {\n\t\t\tpath = path[len(prefix):]\n\t\t\t// 如果该节点没有通配符(param或catchAll)子节点\n\t\t\t// 我们可以继续查找下一个子节点\n\t\t\tif !n.wildChild {\n\t\t\t\tc := path[0]\n\t\t\t\tindices := n.indices\n\t\t\t\tfor i, max := 0, len(indices); i < max; i++ {\n\t\t\t\t\tif c == indices[i] {\n\t\t\t\t\t\tn = n.children[i] // 遍历树\n\t\t\t\t\t\tcontinue walk\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// 没找到\n\t\t\t\t// 如果存在一个相同的URL但没有末尾/的叶子节点\n\t\t\t\t// 我们可以建议重定向到那里\n\t\t\t\tvalue.tsr = path == "/" && n.handlers != nil\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\t// 根据节点类型处理通配符子节点\n\t\t\tn = n.children[0]\n\t\t\tswitch n.nType {\n\t\t\tcase param:\n\t\t\t\t// find param end (either \'/\' or path end)\n\t\t\t\tend := 0\n\t\t\t\tfor end < len(path) && path[end] != \'/\' {\n\t\t\t\t\tend++\n\t\t\t\t}\n\n\t\t\t\t// 保存通配符的值\n\t\t\t\tif cap(value.params) < int(n.maxParams) {\n\t\t\t\t\tvalue.params = make(Params, 0, n.maxParams)\n\t\t\t\t}\n\t\t\t\ti := len(value.params)\n\t\t\t\tvalue.params = value.params[:i+1] // 在预先分配的容量内扩展slice\n\t\t\t\tvalue.params[i].Key = n.path[1:]\n\t\t\t\tval := path[:end]\n\t\t\t\tif unescape {\n\t\t\t\t\tvar err error\n\t\t\t\t\tif value.params[i].Value, err = url.QueryUnescape(val); err != nil {\n\t\t\t\t\t\tvalue.params[i].Value = val // fallback, in case of error\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tvalue.params[i].Value = val\n\t\t\t\t}\n\n\t\t\t\t// 继续向下查询\n\t\t\t\tif end < len(path) {\n\t\t\t\t\tif len(n.children) > 0 {\n\t\t\t\t\t\tpath = path[end:]\n\t\t\t\t\t\tn = n.children[0]\n\t\t\t\t\t\tcontinue walk\n\t\t\t\t\t}\n\n\t\t\t\t\t// ... but we can\'t\n\t\t\t\t\tvalue.tsr = len(path) == end+1\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\tif value.handlers = n.handlers; value.handlers != nil {\n\t\t\t\t\tvalue.fullPath = n.fullPath\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tif len(n.children) == 1 {\n\t\t\t\t\t// 没有找到处理函数. 检查此路径末尾加/的路由是否存在注册函数\n\t\t\t\t\t// 用于 TSR 推荐\n\t\t\t\t\tn = n.children[0]\n\t\t\t\t\tvalue.tsr = n.path == "/" && n.handlers != nil\n\t\t\t\t}\n\t\t\t\treturn\n\n\t\t\tcase catchAll:\n\t\t\t\t// 保存通配符的值\n\t\t\t\tif cap(value.params) < int(n.maxParams) {\n\t\t\t\t\tvalue.params = make(Params, 0, n.maxParams)\n\t\t\t\t}\n\t\t\t\ti := len(value.params)\n\t\t\t\tvalue.params = value.params[:i+1] // 在预先分配的容量内扩展slice\n\t\t\t\tvalue.params[i].Key = n.path[2:]\n\t\t\t\tif unescape {\n\t\t\t\t\tvar err error\n\t\t\t\t\tif value.params[i].Value, err = url.QueryUnescape(path); err != nil {\n\t\t\t\t\t\tvalue.params[i].Value = path // fallback, in case of error\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tvalue.params[i].Value = path\n\t\t\t\t}\n\n\t\t\t\tvalue.handlers = n.handlers\n\t\t\t\tvalue.fullPath = n.fullPath\n\t\t\t\treturn\n\n\t\t\tdefault:\n\t\t\t\tpanic("invalid node type")\n\t\t\t}\n\t\t}\n\n\t\t// 找不到，如果存在一个在当前路径最后添加/的路由\n\t\t// 我们会建议重定向到那里\n\t\tvalue.tsr = (path == "/") ||\n\t\t\t(len(prefix) == len(path)+1 && prefix[len(path)] == \'/\' &&\n\t\t\t\tpath == prefix[:len(prefix)-1] && n.handlers != nil)\n\t\treturn\n\t}\n}\n\n')])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br"),n("span",{staticClass:"line-number"},[t._v("22")]),n("br"),n("span",{staticClass:"line-number"},[t._v("23")]),n("br"),n("span",{staticClass:"line-number"},[t._v("24")]),n("br"),n("span",{staticClass:"line-number"},[t._v("25")]),n("br"),n("span",{staticClass:"line-number"},[t._v("26")]),n("br"),n("span",{staticClass:"line-number"},[t._v("27")]),n("br"),n("span",{staticClass:"line-number"},[t._v("28")]),n("br"),n("span",{staticClass:"line-number"},[t._v("29")]),n("br"),n("span",{staticClass:"line-number"},[t._v("30")]),n("br"),n("span",{staticClass:"line-number"},[t._v("31")]),n("br"),n("span",{staticClass:"line-number"},[t._v("32")]),n("br"),n("span",{staticClass:"line-number"},[t._v("33")]),n("br"),n("span",{staticClass:"line-number"},[t._v("34")]),n("br"),n("span",{staticClass:"line-number"},[t._v("35")]),n("br"),n("span",{staticClass:"line-number"},[t._v("36")]),n("br"),n("span",{staticClass:"line-number"},[t._v("37")]),n("br"),n("span",{staticClass:"line-number"},[t._v("38")]),n("br"),n("span",{staticClass:"line-number"},[t._v("39")]),n("br"),n("span",{staticClass:"line-number"},[t._v("40")]),n("br"),n("span",{staticClass:"line-number"},[t._v("41")]),n("br"),n("span",{staticClass:"line-number"},[t._v("42")]),n("br"),n("span",{staticClass:"line-number"},[t._v("43")]),n("br"),n("span",{staticClass:"line-number"},[t._v("44")]),n("br"),n("span",{staticClass:"line-number"},[t._v("45")]),n("br"),n("span",{staticClass:"line-number"},[t._v("46")]),n("br"),n("span",{staticClass:"line-number"},[t._v("47")]),n("br"),n("span",{staticClass:"line-number"},[t._v("48")]),n("br"),n("span",{staticClass:"line-number"},[t._v("49")]),n("br"),n("span",{staticClass:"line-number"},[t._v("50")]),n("br"),n("span",{staticClass:"line-number"},[t._v("51")]),n("br"),n("span",{staticClass:"line-number"},[t._v("52")]),n("br"),n("span",{staticClass:"line-number"},[t._v("53")]),n("br"),n("span",{staticClass:"line-number"},[t._v("54")]),n("br"),n("span",{staticClass:"line-number"},[t._v("55")]),n("br"),n("span",{staticClass:"line-number"},[t._v("56")]),n("br"),n("span",{staticClass:"line-number"},[t._v("57")]),n("br"),n("span",{staticClass:"line-number"},[t._v("58")]),n("br"),n("span",{staticClass:"line-number"},[t._v("59")]),n("br"),n("span",{staticClass:"line-number"},[t._v("60")]),n("br"),n("span",{staticClass:"line-number"},[t._v("61")]),n("br"),n("span",{staticClass:"line-number"},[t._v("62")]),n("br"),n("span",{staticClass:"line-number"},[t._v("63")]),n("br"),n("span",{staticClass:"line-number"},[t._v("64")]),n("br"),n("span",{staticClass:"line-number"},[t._v("65")]),n("br"),n("span",{staticClass:"line-number"},[t._v("66")]),n("br"),n("span",{staticClass:"line-number"},[t._v("67")]),n("br"),n("span",{staticClass:"line-number"},[t._v("68")]),n("br"),n("span",{staticClass:"line-number"},[t._v("69")]),n("br"),n("span",{staticClass:"line-number"},[t._v("70")]),n("br"),n("span",{staticClass:"line-number"},[t._v("71")]),n("br"),n("span",{staticClass:"line-number"},[t._v("72")]),n("br"),n("span",{staticClass:"line-number"},[t._v("73")]),n("br"),n("span",{staticClass:"line-number"},[t._v("74")]),n("br"),n("span",{staticClass:"line-number"},[t._v("75")]),n("br"),n("span",{staticClass:"line-number"},[t._v("76")]),n("br"),n("span",{staticClass:"line-number"},[t._v("77")]),n("br"),n("span",{staticClass:"line-number"},[t._v("78")]),n("br"),n("span",{staticClass:"line-number"},[t._v("79")]),n("br"),n("span",{staticClass:"line-number"},[t._v("80")]),n("br"),n("span",{staticClass:"line-number"},[t._v("81")]),n("br"),n("span",{staticClass:"line-number"},[t._v("82")]),n("br"),n("span",{staticClass:"line-number"},[t._v("83")]),n("br"),n("span",{staticClass:"line-number"},[t._v("84")]),n("br"),n("span",{staticClass:"line-number"},[t._v("85")]),n("br"),n("span",{staticClass:"line-number"},[t._v("86")]),n("br"),n("span",{staticClass:"line-number"},[t._v("87")]),n("br"),n("span",{staticClass:"line-number"},[t._v("88")]),n("br"),n("span",{staticClass:"line-number"},[t._v("89")]),n("br"),n("span",{staticClass:"line-number"},[t._v("90")]),n("br"),n("span",{staticClass:"line-number"},[t._v("91")]),n("br"),n("span",{staticClass:"line-number"},[t._v("92")]),n("br"),n("span",{staticClass:"line-number"},[t._v("93")]),n("br"),n("span",{staticClass:"line-number"},[t._v("94")]),n("br"),n("span",{staticClass:"line-number"},[t._v("95")]),n("br"),n("span",{staticClass:"line-number"},[t._v("96")]),n("br"),n("span",{staticClass:"line-number"},[t._v("97")]),n("br"),n("span",{staticClass:"line-number"},[t._v("98")]),n("br"),n("span",{staticClass:"line-number"},[t._v("99")]),n("br"),n("span",{staticClass:"line-number"},[t._v("100")]),n("br"),n("span",{staticClass:"line-number"},[t._v("101")]),n("br"),n("span",{staticClass:"line-number"},[t._v("102")]),n("br"),n("span",{staticClass:"line-number"},[t._v("103")]),n("br"),n("span",{staticClass:"line-number"},[t._v("104")]),n("br"),n("span",{staticClass:"line-number"},[t._v("105")]),n("br"),n("span",{staticClass:"line-number"},[t._v("106")]),n("br"),n("span",{staticClass:"line-number"},[t._v("107")]),n("br"),n("span",{staticClass:"line-number"},[t._v("108")]),n("br"),n("span",{staticClass:"line-number"},[t._v("109")]),n("br"),n("span",{staticClass:"line-number"},[t._v("110")]),n("br"),n("span",{staticClass:"line-number"},[t._v("111")]),n("br"),n("span",{staticClass:"line-number"},[t._v("112")]),n("br"),n("span",{staticClass:"line-number"},[t._v("113")]),n("br"),n("span",{staticClass:"line-number"},[t._v("114")]),n("br"),n("span",{staticClass:"line-number"},[t._v("115")]),n("br"),n("span",{staticClass:"line-number"},[t._v("116")]),n("br"),n("span",{staticClass:"line-number"},[t._v("117")]),n("br"),n("span",{staticClass:"line-number"},[t._v("118")]),n("br"),n("span",{staticClass:"line-number"},[t._v("119")]),n("br"),n("span",{staticClass:"line-number"},[t._v("120")]),n("br"),n("span",{staticClass:"line-number"},[t._v("121")]),n("br"),n("span",{staticClass:"line-number"},[t._v("122")]),n("br"),n("span",{staticClass:"line-number"},[t._v("123")]),n("br"),n("span",{staticClass:"line-number"},[t._v("124")]),n("br"),n("span",{staticClass:"line-number"},[t._v("125")]),n("br"),n("span",{staticClass:"line-number"},[t._v("126")]),n("br"),n("span",{staticClass:"line-number"},[t._v("127")]),n("br"),n("span",{staticClass:"line-number"},[t._v("128")]),n("br"),n("span",{staticClass:"line-number"},[t._v("129")]),n("br"),n("span",{staticClass:"line-number"},[t._v("130")]),n("br"),n("span",{staticClass:"line-number"},[t._v("131")]),n("br"),n("span",{staticClass:"line-number"},[t._v("132")]),n("br"),n("span",{staticClass:"line-number"},[t._v("133")]),n("br"),n("span",{staticClass:"line-number"},[t._v("134")]),n("br"),n("span",{staticClass:"line-number"},[t._v("135")]),n("br"),n("span",{staticClass:"line-number"},[t._v("136")]),n("br"),n("span",{staticClass:"line-number"},[t._v("137")]),n("br"),n("span",{staticClass:"line-number"},[t._v("138")]),n("br"),n("span",{staticClass:"line-number"},[t._v("139")]),n("br"),n("span",{staticClass:"line-number"},[t._v("140")]),n("br"),n("span",{staticClass:"line-number"},[t._v("141")]),n("br"),n("span",{staticClass:"line-number"},[t._v("142")]),n("br"),n("span",{staticClass:"line-number"},[t._v("143")]),n("br"),n("span",{staticClass:"line-number"},[t._v("144")]),n("br"),n("span",{staticClass:"line-number"},[t._v("145")]),n("br"),n("span",{staticClass:"line-number"},[t._v("146")]),n("br"),n("span",{staticClass:"line-number"},[t._v("147")]),n("br"),n("span",{staticClass:"line-number"},[t._v("148")]),n("br"),n("span",{staticClass:"line-number"},[t._v("149")]),n("br"),n("span",{staticClass:"line-number"},[t._v("150")]),n("br"),n("span",{staticClass:"line-number"},[t._v("151")]),n("br")])])])}),[],!1,null,null,null);n.default=e.exports},687:function(t,n,s){t.exports=s.p+"assets/img/2023052414010691.ac13c439.png"},688:function(t,n,s){t.exports=s.p+"assets/img/2023052414010631.4633a4e3.png"}}]);