(window.webpackJsonp=window.webpackJsonp||[]).push([[191],{931:function(s,e,a){"use strict";a.r(e);var n=a(4),t=Object(n.a)({},(function(){var s=this,e=s._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h2",{attrs:{id:"django测试"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#django测试"}},[s._v("#")]),s._v(" django测试")]),s._v(" "),e("h2",{attrs:{id:"django-中的测试"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#django-中的测试"}},[s._v("#")]),s._v(" "),e("strong",[s._v("Django 中的测试")])]),s._v(" "),e("p",[s._v("对现在的网络开发者来说，自动化测试是一个非常有用的发现漏洞的工具你可以使用一套测试-"),e("strong",[s._v("测试套件")]),s._v("-去解决，避免一堆的问题：")]),s._v(" "),e("ul",[e("li",[s._v("当你写新代码时，你可以利用测试确保代码按照期望的方式运行。")]),s._v(" "),e("li",[s._v("当你不修改或修改旧代码，你可以利用测试来确保你的修改不会使应用运行出错。")])]),s._v(" "),e("p",[s._v("一个 Web 应用是北极测试的工作，因为 Web 应用包含了真实的业务逻辑——从 HTTP 层响应请求，到表单状态检测和处理，再到模板渲染。利用 Django 的测试执行框架和配套的工具，你可以模拟它你去，插入测试数据，检查应用的输出，测试检验你的代码是否需要运行。")]),s._v(" "),e("p",[s._v("在 Django 中编写测试的首选方法是使用"),e("code",[s._v("unittest")]),s._v("Python 标准库的内置模块。")]),s._v(" "),e("p",[s._v("也可以使用"),e("em",[s._v("另一个")]),s._v("的Python测试框架")]),s._v(" "),e("h2",{attrs:{id:"_1、普通单元测试"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、普通单元测试"}},[s._v("#")]),s._v(" "),e("strong",[s._v("1、普通单元测试")])]),s._v(" "),e("p",[s._v("一段代码测试另一段代码")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("from django.test import TestCase\nimport unittest\n\n# Create your tests here.\n\ndef add(x, y):\n    return x + y\n\nclass My_test(unittest.TestCase):\n    def test1(self):\n        c = add(1, 3)\n        self.assertEqual(c, 4)\n\n    def test2(self):\n        c = add(2, 3)\n        self.assertEqual(c, 5)\n\n    def test3(self):\n        c = add(1.1, 3)\n        self.assertEqual(c, 4)\n\nif __name__ == '__main__':\n    unittest.main()\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br")])]),e("h2",{attrs:{id:"_2、django模型-models-py-测试"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、django模型-models-py-测试"}},[s._v("#")]),s._v(" "),e("strong",[s._v("2、django模型("),e("a",{attrs:{href:"http://models.py",target:"_blank",rel:"noopener noreferrer"}},[s._v("models.py"),e("OutboundLink")],1),s._v(")测试")])]),s._v(" "),e("p",[s._v("需要数据库的测试（即模型测试）不会使用您的“真实”（生产）数据库。为测试创建单独的空白数据库。")]),s._v(" "),e("p",[s._v("无论测试通过还是失败，当所有测试都执行完毕后，测试数据库就会被销毁。")]),s._v(" "),e("p",[s._v("Django 的单元测试采用 Python 的标准模块："),e("code",[s._v("unittest")]),s._v("。该模块以类的形式定义测试。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('from django.test import TestCase\nfrom myapp.models import Animal\n\nclass AnimalTestCase(TestCase):  # TestCase继承unittest\n    def setUp(self):   # 添加测试用例\n        Animal.objects.create(name="lion", sound="roar")\n        Animal.objects.create(name="cat", sound="meow")\n\n    def test_animals_can_speak(self):\n        """Animals that can speak are correctly identified"""\n        lion = Animal.objects.get(name="lion")\n        cat = Animal.objects.get(name="cat")\n        self.assertEqual(lion.sound, "roar"\')\n        self.assertEqual(cat.sound, "meow")\npython manage.py test\n\n ./manage.py test animals.tests.AnimalTestCase.test_animals_can_speak  # 测试那个路径下的\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br")])]),e("p",[e("strong",[s._v("注意")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("如果你的测试依赖数据库连接，例如创建或模型，请确保继承django.test.TestCase实现你的测试类，而不是unittest.TestCase。\n使用unittest.TestCase可以避免在事务中运行每个测试和刷新数据库，但是如果您的测试与数据库交互，它们的行为将根据测试运行器执行它们的顺序而有所不同。这可能导致单元测试在单独运行时通过但在套件中运行时失败。\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("h2",{attrs:{id:"_3、执行测试的顺序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、执行测试的顺序"}},[s._v("#")]),s._v(" "),e("strong",[s._v("3、执行测试的顺序")])]),s._v(" "),e("p",[s._v("为了保证所有"),e("code",[s._v("TestCase")]),s._v("代码都从一个干净的数据库开始，Django 测试运行器按以下方式重新排序测试：")]),s._v(" "),e("ul",[e("li",[e("code",[s._v("TestCase")]),s._v("首先运行所有子类。")]),s._v(" "),e("li",[s._v("然后，所有其他基于 Django 的测试（基于"),e("code",[s._v("SimpleTestCase")]),s._v("，包括 的 测试用例"),e("code",[s._v("TransactionTestCase")]),s._v("）在没有特定顺序保证或强制执行的情况下 运行。")]),s._v(" "),e("li",[s._v("然后"),e("code",[s._v("unittest.TestCase")]),s._v("运行可能会更改数据库而不将其恢复到其原始状态的任何其他测试（包括 doctests）。")])]),s._v(" "),e("h2",{attrs:{id:"_4、实例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4、实例"}},[s._v("#")]),s._v(" "),e("strong",[s._v("4、实例")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('from django.test import TestCase\nimport unittest\n\nfrom .models import UserInfo\n\nclass UserTest(TestCase):\n    def setUp(self) -> None:  # 添加测试用例\n        UserInfo.objects.create(username="abc", email="1992@qq.com", mobile_phone="111", password="123456")\n        UserInfo.objects.create(username="abc1", email="1992222@qq.com", mobile_phone="122211", password="12345678")\n\n    def test_create(self):  # 创建测试\n        UserInfo.objects.create(username="abc2", email="199222@qq.com", mobile_phone="111111", password="123456")\n        p = UserInfo.objects.get(username="abc2")\n        self.assertEqual(p.username, "abc2")\n        self.assertEqual(p.mobile_phone, "111111")\n\n    def test_delete(self):  # 删除测试\n        p = UserInfo.objects.get(username="abc2")\n        p.delete()\n        ret = UserInfo.objects.filter(username="abc2")\n        self.assertEqual(ret.username, "abc2")\n\n    def test_update(self):  # 更新测试\n        p = UserInfo.objects.get(username="abc")\n        p.username = "cba"\n        p.save()\n        ret = UserInfo.objects.get(username="cba")\n        self.assertEqual(ret.username, "cba")\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br")])]),e("h3",{attrs:{id:"理解测试输出"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#理解测试输出"}},[s._v("#")]),s._v(" "),e("strong",[s._v("理解测试输出")])]),s._v(" "),e("p",[s._v("当您运行测试时，您会在测试运行器自行准备时看到许多消息。您可以"),e("code",[s._v("verbosity")]),s._v("使用命令行上的选项控制这些消息的详细程度 ：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("Creating test database...\nCreating table myapp_animal\nCreating table myapp_mineral\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("这告诉您测试运行器正在创建一个测试数据库，如上一节所述。")]),s._v(" "),e("p",[s._v("创建测试数据库后，Django 将运行您的测试。如果一切顺利，您会看到如下内容：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("----------------------------------------------------------------------\nRan 22 tests in 0.221s\n\nOK\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("但是，如果存在测试失败，您将看到有关哪些测试失败的完整详细信息：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('======================================================================\nFAIL: test_was_published_recently_with_future_poll (polls.tests.PollMethodTests)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File "/dev/mysite/polls/tests.py", line 16, in test_was_published_recently_with_future_poll\n    self.assertIs(future_poll.was_published_recently(), False)\nAssertionError: True is not False\n\n----------------------------------------------------------------------\nRan 1 test in 0.003s\n\nFAILED (failures=1)\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br")])]),e("p",[s._v("此错误输出的完整解释超出了本文档的范围，但非常直观。您可以查阅 Python"),e("code",[s._v("unittest")]),s._v("库的文档 以了解详细信息。")]),s._v(" "),e("p",[s._v("请注意，对于任意数量的失败和错误测试，test-runner 脚本的返回码为 1。如果所有测试都通过，则返回码为 0。如果您在 shell 脚本中使用 test-runner 脚本并且需要在该级别测试成功或失败，则此功能很有用。")])])}),[],!1,null,null,null);e.default=t.exports}}]);