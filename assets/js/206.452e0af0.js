(window.webpackJsonp=window.webpackJsonp||[]).push([[206],{950:function(s,n,a){"use strict";a.r(n);var e=a(4),t=Object(e.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h2",{attrs:{id:"简述面向对象的三大特性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#简述面向对象的三大特性"}},[s._v("#")]),s._v(" 简述面向对象的三大特性")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("继承，将多个子类中相同的方法放在父类中，子类可以继承父类中的方法（提升重用性）\n封装，将多个数据封装到一个对象； 将同类的方法编写（封装）在一个类型中。\n多态，天然支持多态，崇尚鸭子模型，不会对类型进行限制，只要具备相应的属性即可，例如：\n    def func(arg):\n        arg.send()\n    不管arg是什么类型，只要具备send方法即可。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("h2",{attrs:{id:"super的作用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#super的作用"}},[s._v("#")]),s._v(" super的作用？")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("super()是一个内置函数，在Python类的继承中用于调用父类（超类）的方法。使用super()，可以在子类中对父类进行函数调用、属性访问等操作。\n\nsuper()有两种常见的用法：\n\n在子类方法中调用父类方法：使用super().methodname()来调用父类方法。\n在子类初始化方法中调用父类初始化方法：使用super().__init__()来调用父类的初始化方法。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("h2",{attrs:{id:"实例变量和类变量的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实例变量和类变量的区别"}},[s._v("#")]),s._v(" 实例变量和类变量的区别？")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("实例变量是在类实例化时创建，每个实例都有自己的实例变量。也就是说，它们存储在类的实例中，而不是在类本身中。可以通过访问实例来访问实例变量，如instance.variable_name。\n\n类变量是定义在类中但不是在任何方法中的变量。类变量是所有类实例共享的，因此当一个实例更改类变量时，另一个实例也会受到影响。可以通过类名直接访问类变量，如ClassName.variable_name。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("h2",{attrs:{id:"staticmethod-和-classmethod的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#staticmethod-和-classmethod的区别"}},[s._v("#")]),s._v(" @staticmethod 和 @classmethod的区别？")]),s._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[s._v("区别在于：\n\n"),n("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[s._v("@staticmethod")]),s._v("：静态方法，与类没有任何关系，只是一个保存在类命名空间中的函数，调用时需要通过类来调用，也可以使用对象或类来调用。静态方法中不能访问类中的属性和方法，也不能访问实例化的对象。\n"),n("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[s._v("@classmethod")]),s._v("：类方法，与具体的实例无关，在定义时需要将类作为第一个参数，通常将类方法用来修改类属性。\n下面是示例代码：\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyClass")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    \n    class_attr "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"class attribute"')]),s._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("__init__")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("x "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" x\n    \n    "),n("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[s._v("@staticmethod")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("my_static_method")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" b\n    \n    "),n("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[s._v("@classmethod")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("my_class_method")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("cls"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        cls"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("class_attr "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" a\n      \n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 调用静态方法")]),s._v("\nMyClass"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("my_static_method"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 调用类方法")]),s._v("\nMyClass"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("my_class_method"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"new value"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br")])]),n("h2",{attrs:{id:"简述-new-和-init-的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#简述-new-和-init-的区别"}},[s._v("#")]),s._v(" 简述 "),n("code",[s._v("__new__")]),s._v("和"),n("code",[s._v("__init__")]),s._v("的区别？")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("__new__，构造方法，用于创建对象。\n__init__，初始化方法，用于在对象中初始化值。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("h2",{attrs:{id:"在python中如何定义私有成员"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#在python中如何定义私有成员"}},[s._v("#")]),s._v(" 在Python中如何定义私有成员？")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("用两个下划线开头。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h2",{attrs:{id:"请基于-new-实现一个单例类-加锁-。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#请基于-new-实现一个单例类-加锁-。"}},[s._v("#")]),s._v(" 请基于"),n("code",[s._v("__new__")]),s._v(" 实现一个单例类（加锁）。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("import threading\n\nclass Singleton(object):\n    instance = None\n    lock = threading.RLock()\n\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def __new__(cls, *args, **kwargs):\n        if cls.instance:\n            return cls.instance\n        with cls.lock:\n            if cls.instance:\n                return cls\n            cls.instance = super().__new__(cls)\n        return cls.instance\n\nobj1 = Singleton('武沛齐', 18)\nprint(obj1)\n\nobj2 = Singleton('alex', 18)\nprint(obj2)\n\n# 注意：单例模式，用于用的是第一次创建的那个对象，但对象中的实例变量会被重置。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br")])]),n("h2",{attrs:{id:"比较以下两段代码的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#比较以下两段代码的区别"}},[s._v("#")]),s._v(" 比较以下两段代码的区别")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class Foo(object):\n    def func(self,num):\n        pass\n\nobj = Foo()\nobj.func(123)\n\nobj = Foo()\nFoo.func(obj,123)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('class F1(object):\n    def func(self,num):\n        print("F1.func",num)\n\nclass F2(F1):\n    def func(self,num):\n        print("F2.func",num)\n\nclass F3(F2):\n    def run(self):\n        F1.func(self,1)   # 直接执行F1中的func方法。\n\nobj = F3()\nobj.run()\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('class F1(object):\n    def func(self,num):\n        print("F1.func",num)\n\nclass F2(F1):\n    def func(self,num):\n        print("F2.func",num)\n\nclass F3(F2):\n    def run(self):\n        super().func(1)  # 根据mro的顺序，执行F2中的func方法\n\nobj = F3()\nobj.run()\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("h3",{attrs:{id:"补充代码实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#补充代码实现"}},[s._v("#")]),s._v(" 补充代码实现")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class Context:\n    pass\n\nwith Context() as ctx:\n    ctx.do_something()\n\n# 请在Context类下添加代码完成该类的实现\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('class Context:\n\n    def __enter__(self):\n        print("进入")\n        return self\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        print("出去")\n\n    def do_something(self):\n        print("执行")\n\nwith Context() as ctx:\n    ctx.do_something()\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("h2",{attrs:{id:"简述-迭代器、可迭代对象-的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#简述-迭代器、可迭代对象-的区别"}},[s._v("#")]),s._v(" 简述 迭代器、可迭代对象 的区别？")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("迭代器，\n    1.当类中定义了 __iter__ 和 __next__ 两个方法。\n    2.__iter__ 方法需要返回对象本身，即：self\n    3. __next__ 方法，返回下一个数据，如果没有数据了，则需要抛出一个StopIteration的异常。\n\n可迭代对象，在类中定义了 __iter__ 方法并返回一个迭代器对象。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("h2",{attrs:{id:"什么是反射"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#什么是反射"}},[s._v("#")]),s._v(" 什么是反射？")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("反射，通过字符串的形式去操作对象中的成员。例如：getattr/setattr/delattr/hashattr\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h2",{attrs:{id:"简述osi七层模型。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#简述osi七层模型。"}},[s._v("#")]),s._v(" 简述OSI七层模型。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('OSI七层模型分为：应用层、表示层、会话层、传输层、网络层、数据连路程、物理层，其实就是让各层各司其职，完成各自的事。\n\n以Http协议为例，简述各层的职责：\n    应用层，规定数据传格式。\n        "GET /s?wd=你好 HTTP/1.1\\\\r\\\\nHost:www.baidu.com\\\\r\\\\n\\\\r\\\\n"\n    表示层，对应用层数据的编码、压缩（解压缩）、分块、加密（解密）等任务。\n        "GET /s?wd=你好 HTTP/1.1\\\\r\\\\nHost:www.baidu.com\\\\r\\\\n\\\\r\\\\n你好".encode(\'utf-8\')\n    会话层，负责与目标建立、中断连接。\n    传输层，建立端口到端口的通信，其实就确定双方的端口信息。\n        数据："GET /s?wd=你好 HTTP/1.1\\\\r\\\\nHost:www.baidu.com\\\\r\\\\n\\\\r\\\\n你好".encode(\'utf-8\')\n        端口：\n            - 目标：80\n            - 本地：6784\n    网络层，标记IP信息。\n        数据："GET /s?wd=你好 HTTP/1.1\\\\r\\\\nHost:www.baidu.com\\\\r\\\\n\\\\r\\\\n你好".encode(\'utf-8\')\n        端口：\n            - 目标：80\n            - 本地：6784\n        IP：\n            - 目标IP：110.242.68.3\n            - 本地IP：192.168.10.1\n    数据连路程，设置MAC地址信息\n        数据："POST /s?wd=你好 HTTP/1.1\\\\r\\\\nHost:www.baidu.com\\\\r\\\\n\\\\r\\\\n你好".encode(\'utf-8\')\n        端口：\n            - 目标：80\n            - 本地：6784\n        IP：\n            - 目标IP：110.242.68.3（百度）\n            - 本地IP：192.168.10.1\n        MAC：\n            - 目标MAC：FF-FF-FF-FF-FF-FF\n            - 本机MAC：11-9d-d8-1a-dd-cd\n    物理层，将二进制数据在物理媒体上传输。\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br")])]),n("h2",{attrs:{id:"udp和tcp的区别。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#udp和tcp的区别。"}},[s._v("#")]),s._v(" UDP和TCP的区别。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("- UDP，UDP不提供可靠性，它只是把应⽤程序传给IP层的数据报发送出去， 但是并不能保证它们能到达⽬的地。 由于UDP在传输数据报前不⽤在客户和服务器之间建⽴⼀个连接， 且没有超时重发等机制， 故⽽传输速度很快。常见的有：语音通话、视频通话、实时游戏画面 等。\n- TCP，在收发数据前，必须和对方建立可靠的连接，然后再进行收发数据。常见有：网站、手机APP数据获取等。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("h2",{attrs:{id:"简述tcp三次握手和四次挥手的过程。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#简述tcp三次握手和四次挥手的过程。"}},[s._v("#")]),s._v(" 简述TCP三次握手和四次挥手的过程。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("创建连接，三次握手：\n    第一次：客户端向服务端请求，发送：seq=100（随机值）；\n    第二次：服务端接收请求，然后给客户端发送：seq=300（随机值）、ack=101（原来客户端口发来请求的seq+1）\n    第三次：客户接接收请求，然后给服务端发送：seq=101（第2次返回的值）、 ack=301（第2次seq+1）\n\n    第1、2次过程，客户端发送了数据seq，服务端也回给了seq+1，证明：客户端可以正常收发数据。此时，服务端不知客户端是否正常接收到了。\n    第2、3次过程，服务端发送了数据seq，客户端也返回了seq+1，证明：服务端可以正常收发数据。\n\n断开连接，四次挥手：（任意一方都可以发起）\n    第一次：客户端向服务端发请求，发送：<seq=100><ack=300>       （我要与你断开连接）\n    第二次：服务端接收请求，然后给客户端发送：<seq=300><ack=101>  （已收到，可能还有数据未处理，等等）\n    第三次：服务端接收请求，然后给客户端发送：<seq=300><ack=101>  （可以断开连接了）\n    第四次：客户端接收请求，然后给服务端发送：<seq=101><ack=301>  （好的，可以断开了）\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("h2",{attrs:{id:"简述你理解的ip和子网掩码。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#简述你理解的ip和子网掩码。"}},[s._v("#")]),s._v(" 简述你理解的IP和子网掩码。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("子网掩码用于给IP划分网段，IP分为：网络地址 + 主机地址。\n简而言之，子网掩码掩盖的IP部分就是网络地址，未掩盖就是主机部分。\n\n例如：\n        IP：192.168.1.199      11000000.10101000.00000001.11000111\n    子网掩码：255.255.255.0     11111111.11111111.11111111.00000000\n此时，网络地址就是前24位 + 主机地址是后8位。你可能见过有些IP这样写 192.168.1.199/24，意思也是前24位是网络地址。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("h2",{attrs:{id:"端口的作用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#端口的作用"}},[s._v("#")]),s._v(" 端口的作用？")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("在网络编程中，IP代指的是计算机，而端口则代指计算机中的某个程序。以方便对计算机中的多个程序进程区分。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h2",{attrs:{id:"什么是粘包-如何解决粘包"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#什么是粘包-如何解决粘包"}},[s._v("#")]),s._v(" 什么是粘包？如何解决粘包？")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("两台电脑在进行收发数据时，其实不是直接将数据传输给对方。\n\n- 对于发送者，执行 `sendall/send` 发送消息时，是将数据先发送至自己网卡的 写缓冲区 ，再由缓冲区将数据发送给到对方网卡的读缓冲区。\n- 对于接受者，执行 `recv` 接收消息时，是从自己网卡的读缓冲区获取数据。\n\n所以，如果发送者连续快速的发送了2条信息，接收者在读取时会认为这是1条信息，即：2个数据包粘在了一起。\n\n解决思路：\n    双方约定好规则，在每次收发数据时，都按照固定的 数据头 + 数据 来进行处理数据包，在数据头中设置好数据的长度。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("h2",{attrs:{id:"io多路复用的作用是什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#io多路复用的作用是什么"}},[s._v("#")]),s._v(" IO多路复用的作用是什么？")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("可以监听多个 IO对象 的变化（可读、可写、异常）。\n\n在网络编程中一般与非阻塞的socket对象配合使用，以监听 socket服务端、客户端是否 （可读、可写、异常）\n\nIO多路复用有三种模式：\n    - select，限制1024个 & 轮训的机制监测。\n    - poll，无限制 & 轮训的机制监测。\n    - epoll，无限制 & 采用回调的机制（边缘触发）。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("h2",{attrs:{id:"简述进程、线程、协程的区别。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#简述进程、线程、协程的区别。"}},[s._v("#")]),s._v(" 简述进程、线程、协程的区别。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("线程，是计算机中可以被cpu调度的最小单元。\n进程，是计算机资源分配的最小单元（进程为线程提供资源）。\n一个进程中可以有多个线程,同一个进程中的线程可以共享此进程中的资源。\n\n由于CPython中GIL的存在：\n    - 线程，适用于IO密集型操作。\n    - 进程，适用于计算密集型操作。\n\n协程，协程也可以被称为微线程，是一种用户态内的上下文切换技术，在开发中结合遇到IO自动切换，就可以通过一个线程实现并发操作。\n\n所以，在处理IO操作时，协程比线程更加节省开销（协程的开发难度大一些）。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("h2",{attrs:{id:"什么是gil锁-其作用是什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#什么是gil锁-其作用是什么"}},[s._v("#")]),s._v(" 什么是GIL锁？其作用是什么？")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("GIL， 全局解释器锁（Global Interpreter Lock），是CPython解释器特有一个玩意，让一个进程中同一个时刻只能有一个线程可以被CPU调用。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h2",{attrs:{id:"进程之间如何实现数据的共享"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#进程之间如何实现数据的共享"}},[s._v("#")]),s._v(" 进程之间如何实现数据的共享？")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("multiprocessing.Value 或 multiprocessing.Array\nmultiprocessing.Manager\nmultiprocessing.Queue\nmultiprocessing.Pipe\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("h2",{attrs:{id:"已知一个订单对象-tradeorder-有如下字段"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#已知一个订单对象-tradeorder-有如下字段"}},[s._v("#")]),s._v(" 已知一个订单对象（tradeOrder）有如下字段：")]),s._v(" "),n("table",[n("thead",[n("tr",[n("th",[s._v("字段英文名")]),s._v(" "),n("th",[s._v("中文名")]),s._v(" "),n("th",[s._v("字段类型")]),s._v(" "),n("th",[s._v("取值举例")])])]),s._v(" "),n("tbody",[n("tr",[n("td",[s._v("nid")]),s._v(" "),n("td",[s._v("ID")]),s._v(" "),n("td",[s._v("int")]),s._v(" "),n("td",[s._v("123456789")])]),s._v(" "),n("tr",[n("td",[s._v("name")]),s._v(" "),n("td",[s._v("姓名")]),s._v(" "),n("td",[s._v("str")]),s._v(" "),n("td",[s._v("张三")])]),s._v(" "),n("tr",[n("td",[s._v("items")]),s._v(" "),n("td",[s._v("商品列表")]),s._v(" "),n("td",[s._v("list")]),s._v(" "),n("td",[s._v("可以存放多个订单对象")])]),s._v(" "),n("tr",[n("td",[s._v("is_member")]),s._v(" "),n("td",[s._v("是否是会员")]),s._v(" "),n("td",[s._v("bool")]),s._v(" "),n("td",[s._v("True")])])])]),s._v(" "),n("p",[s._v("商品对象有如下字段：")]),s._v(" "),n("table",[n("thead",[n("tr",[n("th",[s._v("字段英文名称")]),s._v(" "),n("th",[s._v("中文名")]),s._v(" "),n("th",[s._v("字段类型")]),s._v(" "),n("th",[s._v("取值")])])]),s._v(" "),n("tbody",[n("tr",[n("td",[s._v("id")]),s._v(" "),n("td",[s._v("主键")]),s._v(" "),n("td",[s._v("int")]),s._v(" "),n("td",[s._v("987654321")])]),s._v(" "),n("tr",[n("td",[s._v("name")]),s._v(" "),n("td",[s._v("商品名称")]),s._v(" "),n("td",[s._v("str")]),s._v(" "),n("td",[s._v("手机")])])])]),s._v(" "),n("p",[s._v("请根据要求实现如下功能：")]),s._v(" "),n("ul",[n("li",[s._v("编写相关类。")]),s._v(" "),n("li",[s._v("创建订单对象并根据关系关联多个商品对象。")]),s._v(" "),n("li",[s._v("用json模块将对象进行序列化为JSON格式（提示：需自定义"),n("code",[s._v("JSONEncoder")]),s._v("）。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('import json\n\nclass ObjectJsonEncoder(json.JSONEncoder):\n    def default(self, o):\n        if type(o) in {Order, Goods}:\n            return o.__dict__\n        else:\n            return o\n\nclass Order(object):\n    def __init__(self, nid,name,is_member):\n        self.nid = nid\n        self.name = name\n        self.is_member = is_member\n        self.items = []\n\nclass Goods(object):\n    def __init__(self, id, name):\n        self.id = id\n        self.name = name\n\nod = Order(666,"武沛齐",True)\nod.items.append( Goods(1, "汽车") )\nod.items.append( Goods(2, "美女") )\nod.items.append( Goods(3, "游艇") )\n\ndata = json.dumps(od, cls=ObjectJsonEncoder)\nprint(data)\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br")])]),n("ol",[n("li",[n("p",[s._v("基于面向对象的知识构造一个链表。")]),s._v(" "),n("p",[s._v("注意：每个链表都是一个对象，对象内部均存储2个值，分为是：当前值、下一个对象 。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('class Node(object):\n\n    def __init__(self, value, _next):\n        self.value = value\n        self.next = _next\n\n# 手动创建链表\nv4 = Node("火蜥蜴",None)\nv3 = Node("女神",v4)\nv2 = Node("武沛齐",v3)\nv1 = Node("alex",v2)\n\n# 根据列表创建链表\ndata_list = ["alex", "武沛齐", "女神", "火蜥蜴"]\nroot = None\nfor index in range(len(data_list) - 1, -1, -1): # [3,2,1,0]\n    node = Node( data_list[index] , root)\n    root = node\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br")])])]),s._v(" "),n("li",[n("p",[s._v("读源码，分析代码的执行过程。")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("socket服务端")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('import socket\nimport threading\n\nclass BaseServer:\n\n    def __init__(self, server_address, request_handler_class):\n        # ("127.0.0.1", 8000),   MyHandler -> 类\n        self.server_address = server_address\n        self.request_handler_class = request_handler_class\n\n    def serve_forever(self):\n        while True:\n            # 等待客户端来连接\n            # conn,address = socket.accept()\n            request, client_address = self.get_request()\n\n            self.process_request(request, client_address)\n\n    def finish_request(self, request, client_address):\n        # MyHandler -> 类\n        # MyHandler()   -> MyHandler.__init__(conn,address, self)\n        # MyHandler.__call__方法\n        self.request_handler_class(request, client_address, self)()\n\n    def process_request(self, request, client_address):\n        pass\n\n    def get_request(self):\n        return "傻儿子", "Alex"\n\nclass TCPServer(BaseServer):\n    address_family = socket.AF_INET\n\n    socket_type = socket.SOCK_STREAM\n\n    request_queue_size = 5\n\n    allow_reuse_address = False\n\n    def __init__(self, server_address, request_handler_class, bind_and_activate=True):\n        # ("127.0.0.1", 8000),   MyHandler\n        BaseServer.__init__(self, server_address, request_handler_class)\n\n        self.socket = socket.socket(self.address_family, self.socket_type)\n        self.server_bind()\n        self.server_activate()\n\n    def server_bind(self):\n        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        self.socket.bind(self.server_address) # （IP、端口）\n        self.server_address = self.socket.getsockname()\n\n    def server_activate(self):\n        self.socket.listen(self.request_queue_size)\n\n    def get_request(self):\n        return self.socket.accept()\n\n    def close_request(self, request):\n        request.close()\n\nclass ThreadingMixIn:\n    def process_request_thread(self, request, client_address):\n        self.finish_request(request, client_address)\n        self.close_request(request)\n\n    def process_request(self, request, client_address):\n        t = threading.Thread(target=self.process_request_thread, args=(request, client_address))\n        t.start()\n\nclass ThreadingTCPServer(ThreadingMixIn, TCPServer):\n    pass\n\nclass BaseRequestHandler:\n    def __init__(self, request, client_address, server):\n        # conn\n        self.request = request\n        self.client_address = client_address\n        self.server = server\n        self.setup()\n\n    def __call__(self, *args, **kwargs):\n        try:\n            self.handle()\n        finally:\n            self.finish()\n\n    def setup(self):\n        pass\n\n    def handle(self):\n        pass\n\n    def finish(self):\n        pass\n\nclass MyHandler(BaseRequestHandler):\ndef handle(self):\n        print(self.request) # conn\n        self.request.sendall(b\'hahahahah...\')\n\n# 在server封装了点值、然后又创建socket服务端\nserver = ThreadingTCPServer(  ("127.0.0.1", 8000),   MyHandler    )\nserver.serve_forever()\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br"),n("span",{staticClass:"line-number"},[s._v("59")]),n("br"),n("span",{staticClass:"line-number"},[s._v("60")]),n("br"),n("span",{staticClass:"line-number"},[s._v("61")]),n("br"),n("span",{staticClass:"line-number"},[s._v("62")]),n("br"),n("span",{staticClass:"line-number"},[s._v("63")]),n("br"),n("span",{staticClass:"line-number"},[s._v("64")]),n("br"),n("span",{staticClass:"line-number"},[s._v("65")]),n("br"),n("span",{staticClass:"line-number"},[s._v("66")]),n("br"),n("span",{staticClass:"line-number"},[s._v("67")]),n("br"),n("span",{staticClass:"line-number"},[s._v("68")]),n("br"),n("span",{staticClass:"line-number"},[s._v("69")]),n("br"),n("span",{staticClass:"line-number"},[s._v("70")]),n("br"),n("span",{staticClass:"line-number"},[s._v("71")]),n("br"),n("span",{staticClass:"line-number"},[s._v("72")]),n("br"),n("span",{staticClass:"line-number"},[s._v("73")]),n("br"),n("span",{staticClass:"line-number"},[s._v("74")]),n("br"),n("span",{staticClass:"line-number"},[s._v("75")]),n("br"),n("span",{staticClass:"line-number"},[s._v("76")]),n("br"),n("span",{staticClass:"line-number"},[s._v("77")]),n("br"),n("span",{staticClass:"line-number"},[s._v("78")]),n("br"),n("span",{staticClass:"line-number"},[s._v("79")]),n("br"),n("span",{staticClass:"line-number"},[s._v("80")]),n("br"),n("span",{staticClass:"line-number"},[s._v("81")]),n("br"),n("span",{staticClass:"line-number"},[s._v("82")]),n("br"),n("span",{staticClass:"line-number"},[s._v("83")]),n("br"),n("span",{staticClass:"line-number"},[s._v("84")]),n("br"),n("span",{staticClass:"line-number"},[s._v("85")]),n("br"),n("span",{staticClass:"line-number"},[s._v("86")]),n("br"),n("span",{staticClass:"line-number"},[s._v("87")]),n("br"),n("span",{staticClass:"line-number"},[s._v("88")]),n("br"),n("span",{staticClass:"line-number"},[s._v("89")]),n("br"),n("span",{staticClass:"line-number"},[s._v("90")]),n("br"),n("span",{staticClass:"line-number"},[s._v("91")]),n("br"),n("span",{staticClass:"line-number"},[s._v("92")]),n("br"),n("span",{staticClass:"line-number"},[s._v("93")]),n("br"),n("span",{staticClass:"line-number"},[s._v("94")]),n("br"),n("span",{staticClass:"line-number"},[s._v("95")]),n("br"),n("span",{staticClass:"line-number"},[s._v("96")]),n("br"),n("span",{staticClass:"line-number"},[s._v("97")]),n("br"),n("span",{staticClass:"line-number"},[s._v("98")]),n("br"),n("span",{staticClass:"line-number"},[s._v("99")]),n("br"),n("span",{staticClass:"line-number"},[s._v("100")]),n("br"),n("span",{staticClass:"line-number"},[s._v("101")]),n("br"),n("span",{staticClass:"line-number"},[s._v("102")]),n("br"),n("span",{staticClass:"line-number"},[s._v("103")]),n("br"),n("span",{staticClass:"line-number"},[s._v("104")]),n("br")])])]),s._v(" "),n("li",[n("p",[s._v("socket客户端")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("import socket\n\n# 1. 向指定IP发送连接请求\nclient = socket.socket()\nclient.connect(('127.0.0.1', 8000)) # 向服务端发起连接（阻塞）10s\n\n# 2. 连接成功之后，发送消息\nclient.sendall('hello'.encode('utf-8'))\n\n# 3. 等待，消息的回复（阻塞）\nreply = client.recv(1024)\nprint(reply)\n\n# 4. 关闭连接\nclient.close()\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])])])])]),s._v(" "),n("li",[n("p",[s._v("请自己基于socket模块和threading模块实现 门票预订 平台。（无需考虑粘包）")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("用户作为socket客户端")]),s._v(" "),n("ul",[n("li",[s._v("输入"),n("code",[s._v("景区名称")]),s._v("，用来查询景区的余票。")]),s._v(" "),n("li",[s._v("输入"),n("code",[s._v("景区名称-预订者-数量")]),s._v("，例如："),n("code",[s._v("欢乐谷-alex-8")]),s._v("，用于预定门票。")])])]),s._v(" "),n("li",[n("p",[s._v("socket服务端，可以支持并发多人同时查询和购买（为每个客户度创建一个线程）。")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("服务端数据存储结构如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("db\n├── tickets\n│   ├── 欢乐谷.txt # 内部存储放票数量\n│   ├── 迪士尼.txt\n│   └── 长城.txt\n└── users\n    ├── alex.txt # 内部存储次用户预定记录\n    └── 武沛齐.txt\n\n# 注意：当用户预定门票时，放票量要减去相应的数量（变为0之后，则不再接受预定）。 约定时会存在多个线程同时操作文件去修改数值。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[s._v("1")])])])])])])])])}),[],!1,null,null,null);n.default=t.exports}}]);