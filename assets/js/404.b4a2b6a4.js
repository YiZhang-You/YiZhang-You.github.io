(window.webpackJsonp=window.webpackJsonp||[]).push([[404],{1190:function(s,a,e){"use strict";e.r(a);var t=e(4),n=Object(t.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"_01-redis简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_01-redis简介"}},[s._v("#")]),s._v(" 01.redis简介")]),s._v(" "),a("h2",{attrs:{id:"_1-1-什么是redis"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-什么是redis"}},[s._v("#")]),s._v(" 1.1 什么是Redis？")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("Redis本质上是一个Key-Value类型的内存数据库，很像memcached。")])]),s._v(" "),a("li",[a("p",[s._v("整个数据库统统加载在内存当中进行操作，定期通过异步操作把数据库数据flush到硬盘上进行保存。")])]),s._v(" "),a("li",[a("p",[s._v("因为是纯内存操作，Redis的性能非常出色，每秒可以处理超过 10万次读写操作，是已知性能最快的Key-Value DB。")])])]),s._v(" "),a("h2",{attrs:{id:"_1-2-redis特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-redis特点"}},[s._v("#")]),s._v(" 1.2 redis特点")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("redis比memcached优点")]),s._v(" "),a("ul",[a("li",[s._v("数据类型：redis支持五中数据类型， memcached所有的值均是简单的字符串")]),s._v(" "),a("li",[s._v("value大小限制：redis单个value的最大限制是512M，memcached只能保存1MB的数据")]),s._v(" "),a("li",[s._v("持久化：redis可以持久化，memcached不支持持久化")])])]),s._v(" "),a("li",[a("p",[s._v("redis为什么快？")]),s._v(" "),a("ul",[a("li",[s._v("纯内存操作")]),s._v(" "),a("li",[s._v("单线程避免上下文切换")]),s._v(" "),a("li",[s._v("非阻塞IO多路复用机制")])])]),s._v(" "),a("li",[a("p",[s._v("redis缺点")]),s._v(" "),a("ul",[a("li",[s._v("内存限制，不能用作海量数据存储")]),s._v(" "),a("li",[s._v("注：如果需要存储海量数据，可以使用MongoDB")])])])]),s._v(" "),a("h1",{attrs:{id:"_02-redis五种数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_02-redis五种数据类型"}},[s._v("#")]),s._v(" 02.redis五种数据类型")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("操作示例：https://www.cnblogs.com/pyyu/p/9467279.html\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("ul",[a("li",[s._v("说明：\n"),a("ul",[a("li",[s._v("1.redis中所有数据结构都以唯一的key字符串作为名称，然后通过这个唯一的key来获取对应的value")]),s._v(" "),a("li",[s._v("2.不同的数据类型数据结构差异就在于value的结构不一样")])])])]),s._v(" "),a("h2",{attrs:{id:"_2-1-字符串-string"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-字符串-string"}},[s._v("#")]),s._v(" 2.1 字符串（string）")]),s._v(" "),a("blockquote",[a("h3",{attrs:{id:"_2-1-1-value的数据结构-数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-1-value的数据结构-数组"}},[s._v("#")]),s._v(" 2.1.1 "),a("code",[s._v("value的数据结构")]),s._v("（数组）")])]),s._v(" "),a("ul",[a("li",[a("p",[s._v("1.字符串value数据结构类似于数组，采用与分配容易空间来减少内存频繁分配")])]),s._v(" "),a("li",[a("p",[s._v("2.当字符串长度小于1M时，扩容就是加倍现有空间")])]),s._v(" "),a("li",[a("p",[s._v("3.如果字符串长度操作1M时，扩容时最多扩容1M空间，字符串最大长度为 512M")])])]),s._v(" "),a("blockquote",[a("h3",{attrs:{id:"_2-1-2-字符串的使用场景-缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-2-字符串的使用场景-缓存"}},[s._v("#")]),s._v(" 2.1.2 "),a("code",[s._v("字符串的使用场景")]),s._v("（缓存）")])]),s._v(" "),a("ul",[a("li",[a("p",[s._v("1.字符串一个常见的用途是缓存用户信息，我们将用户信息使用JSON序列化成字符串")])]),s._v(" "),a("li",[a("p",[s._v("2.取用户信息时会经过一次反序列化的过程")])])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("set 　　设置key\nget   获取key\nappend  追加string\nmset   设置多个键值对\nmget   获取多个键值对\ndel  删除key\nincr  递增+1\ndecr  递减-1\n\n操作示例：https://www.cnblogs.com/pyyu/p/9467279.html\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("h2",{attrs:{id:"_2-2-list-列表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-list-列表"}},[s._v("#")]),s._v(" 2.2 list（列表）")]),s._v(" "),a("blockquote",[a("h3",{attrs:{id:"_2-1-1-value的数据结构-双向链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-1-value的数据结构-双向链表"}},[s._v("#")]),s._v(" 2.1.1 "),a("code",[s._v("value的数据结构")]),s._v("（双向链表）")])]),s._v(" "),a("ul",[a("li",[a("p",[s._v("1.列表的数据结构是双向链表，这意味着插入和删除的时间复杂度是0(1)，索引的时间复杂度位0(n)")])]),s._v(" "),a("li",[a("p",[s._v("2.当列表弹出最后一个元素后，该数据结构会被自动删除，内存被回手")])])]),s._v(" "),a("blockquote",[a("h3",{attrs:{id:"_2-1-2-列表的使用场景-队列、栈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-2-列表的使用场景-队列、栈"}},[s._v("#")]),s._v(" 2.1.2 "),a("code",[s._v("列表的使用场景")]),s._v("（队列、栈）")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("lpush         从列表左边插\nrpush         从列表右边插\nlrange          获取一定长度的元素  lrange key  start stop\nltrim               截取一定长度列表\nlpop                 删除最左边一个元素\nrpop                     删除最右边一个元素\nlpushx/rpushx                key存在则添加值，不存在不处理\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h2",{attrs:{id:"_2-3-hash-字典"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-hash-字典"}},[s._v("#")]),s._v(" 2.3 hash（字典）")]),s._v(" "),a("blockquote",[a("h3",{attrs:{id:"_2-3-1value的数据结构-hashmap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-1value的数据结构-hashmap"}},[s._v("#")]),s._v(" 2.3.1"),a("code",[s._v("value的数据结构")]),s._v("（HashMap）")])]),s._v(" "),a("ul",[a("li",[a("p",[s._v("1.redis中的字典也是HashMap（数组+列表）的二维结构")])]),s._v(" "),a("li",[a("p",[s._v("2.不同的是redis的字典的值只能是字符串")])])]),s._v(" "),a("blockquote",[a("h3",{attrs:{id:"_2-3-2-hash的使用场景-缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-2-hash的使用场景-缓存"}},[s._v("#")]),s._v(" 2.3.2 "),a("code",[s._v("hash的使用场景")]),s._v("（缓存）")])]),s._v(" "),a("ul",[a("li",[s._v("1.hash结构也可以用来缓存用户信息，与字符串一次性全部序列化整个对象不同，hash可以对每个字段进行单独存储")]),s._v(" "),a("li",[s._v("2.这样可以部分获取用户信息，节约网络流量")]),s._v(" "),a("li",[s._v("3.hash也有缺点，hash结构的存储消耗要高于单个字符串")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("哈希结构就是  k1   ->  k1 : v1     如同字典 套字典  { k1 : { k2: v2 }  }   ，取出v2 必须  k1，取出k2\n\nhashes即哈希。哈希是从redis-2.0.0版本之后才有的数据结构。\n\nhashes存的是字符串和字符串值之间的映射，比如一个用户要存储其全名、姓氏、年龄等等，就很适合使用哈希。\n\nhset 设置散列值\nhget  获取散列值\nhmset  设置多对散列值\nhmget  获取多对散列值\nhsetnx   如果散列已经存在，则不设置（防止覆盖key）\nhkeys     返回所有keys\nhvals     返回所有values\nhlen      返回散列包含域（field）的数量\nhdel     删除散列指定的域（field）\nhexists    判断是否存在\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("h2",{attrs:{id:"_2-4-set-集合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-set-集合"}},[s._v("#")]),s._v(" 2.4 set（集合）")]),s._v(" "),a("blockquote",[a("h3",{attrs:{id:"_2-4-1-value的数据结构-字典"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-1-value的数据结构-字典"}},[s._v("#")]),s._v(" 2.4.1 value的数据结构（字典）")])]),s._v(" "),a("ul",[a("li",[s._v("redis中的集合相当于一个特殊的字典，字典的所有value都位null")]),s._v(" "),a("li",[s._v("当集合中的最后一个元素被移除后，数据结构会被自动删除，内存被回收")])]),s._v(" "),a("blockquote",[a("h3",{attrs:{id:"_2-4-2-set使用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-2-set使用场景"}},[s._v("#")]),s._v(" 2.4.2 set使用场景")])]),s._v(" "),a("ul",[a("li",[s._v("set结构可以用来存储某个活动中中奖的用户ID,因为有去重功能，可以保证同一用户不会中间两次")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("redis的集合，是一种无序的集合，集合中的元素没有先后顺序。\n\n集合相关的操作也很丰富，如添加新元素、删除已有元素、取交集、取并集、取差集等。我们来看例子：\n\nsadd/srem   添加/删除 元素\nsismember   判断是否为set的一个元素\nsmembers    返回集合所有的成员\nsdiff             返回一个集合和其他集合的差异\nsinter           返回几个集合的交集\nsunion          返回几个集合的并集\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("h2",{attrs:{id:"_2-5-zset-有序集合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-zset-有序集合"}},[s._v("#")]),s._v(" 2.5 zset（有序集合）")]),s._v(" "),a("blockquote",[a("h3",{attrs:{id:"_2-5-1-value的数据结构-跳跃列表-字典"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-1-value的数据结构-跳跃列表-字典"}},[s._v("#")]),s._v(" 2.5.1 "),a("code",[s._v("value的数据结构")]),s._v("（跳跃列表+字典）")])]),s._v(" "),a("ul",[a("li",[s._v("1.zset一方面是一个set，保证了内部的唯一性")]),s._v(" "),a("li",[s._v("2.另一方面它可以给每一个value赋予一个score，代表这个value的权重")]),s._v(" "),a("li",[s._v("3.zset内部实现用的是一种叫做“跳跃列表”的数据结构")]),s._v(" "),a("li",[s._v("4.zset最后一个元素被移除后，数据结构就会被自动删除，内存也会被回收")])]),s._v(" "),a("blockquote",[a("h3",{attrs:{id:"_2-5-2-zset应用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-2-zset应用场景"}},[s._v("#")]),s._v(" 2.5.2 "),a("code",[s._v("zset应用场景")])])]),s._v(" "),a("ul",[a("li",[s._v("1.粉丝列表：value（粉丝ID），score（关注时间），这样可以轻松按关注事件排序")]),s._v(" "),a("li",[s._v("2.学生成绩：value（学生ID），score（考试成绩），这样可以轻松对成绩排序")]),s._v(" "),a("li",[s._v("排行榜")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("都是以z开头的命令\n\nzset的每一个成员都有一个分数与之对应，并且分数是可以重复的。有序集合的增删改由于有啦排序，执行效率就是非常快速的，即便是访问集合中间的数据也是非常高效的。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h1",{attrs:{id:"_03-基本命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_03-基本命令"}},[s._v("#")]),s._v(" 03.基本命令")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("keys *         查看所有key\ntype key      查看key类型\nexpire key seconds    过期时间\nttl key     查看key过期剩余时间        -2表示key已经不存在了\npersist     取消key的过期时间   -1表示key存在，没有过期时间\n\nexists key     判断key存在    存在返回1    否则0\ndel keys     删除key    可以删除多个\ndbsize         计算key的数量\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])])])}),[],!1,null,null,null);a.default=n.exports}}]);